<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Dash&#39;s Blog</title>
    <link>https://yuukidach.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Dash&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Sep 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://yuukidach.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UVa OJ 1220 - Party at Hali-Bula</title>
      <link>https://yuukidach.github.io/p/uva-oj-1220-party-at-hali-bula/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1220-party-at-hali-bula/</guid>
      <description>Problem Here is the: problem link
Solution 这道题目一开始没有用f[][]来标记是否重复，导致WA了一次，后来就加上去了。另外，在处理人名时，虽然实例输入里，上司和下属名字出现是有先后的，但是提交之后，系统的测试数据貌似不一定是这样，所以要先判断是否出现，没出现就用cnt加1再赋值
递归的思路还是不难的，选了上司，那么直属员工就不选，用d[][0]表示不选;没选的话就可以选直属员工，也可以不选，分别是d[][1]和d[][0]
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;map&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;cstring&amp;gt;using namespace std; #define G sons[b][i] const int maxn = 205; int n, res, yn, d[maxn][2], f[maxn][2]; char c1[maxn], c2[maxn]; map&amp;lt;string, int&amp;gt; p; vector&amp;lt;int&amp;gt; sons[maxn]; int dp(int b,int y) { int&amp;amp; ans = d[b][y]; if (ans != -1) return ans; int k = sons[b].size(); if(!k) {f[b][y] = 1; return ans = y;} int mark = 1; if(y) { for(int i = 0; i &amp;lt; k; ++i) { ans += dp(G,0); if(!</description>
    </item>
    
    <item>
      <title>UVa OJ 12186 - Another Crisis</title>
      <link>https://yuukidach.github.io/p/uva-oj-12186-another-crisis/</link>
      <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-12186-another-crisis/</guid>
      <description>Problem A couple of years ago, a new world wide crisis started, leaving many people with economical problems. Some workers of a particular company are trying to ask for an increase in their salaries.
The company has a strict hierarchy, in which each employee has exactly one direct boss, with the exception of the owner of the company that has no boss. Employees that are not bosses of any other employee are called workers.</description>
    </item>
    
    <item>
      <title>UVa OJ 1331 - Minimax Triangulation</title>
      <link>https://yuukidach.github.io/p/uva-oj-1331-minimax-triangulation/</link>
      <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1331-minimax-triangulation/</guid>
      <description>Problem Here is the: problem link
Solution 这道题目一开始用递归做，但是时间比较长，于是花了比较长的时间去想应该怎么才能转化成递推
这道题目用d[i][j]来表示从i点切割到j点中所含的面积最大的三角形中，最小的那个
这里用了三个循环，第一层是确定分割时跨越的点数，第二层是起点，第三层就是起点和终点中任意取一点分割。同时还要注意分割时会不会有点卡在中间导致实际上不能被分割的情况
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cmath&amp;gt;#include &amp;lt;iomanip&amp;gt;using namespace std; const int maxn = 55; int n, cas; double x[maxn], y[maxn], d[maxn][maxn]; double cntArea(int a, int b, int c) { return fabs((x[b]-x[a])*(y[c]-y[a])-(y[b]-y[a])*(x[c]-x[a]))/2; } bool isOK(int x,int y, int z) { double s = cntArea(x, y, z); for (int i = 0; i &amp;lt; n; ++i) { if (i == x || i == y || i ==z) continue; double tmp = cntArea(x,y,i)+cntArea(x,z,i)+cntArea(y,z,i); if (fabs(s-tmp) &amp;lt; 1e-6) return false; } return true; } int main() { ios::sync_with_stdio(false); cin.</description>
    </item>
    
    <item>
      <title>UVa OJ 10003 - Cutting Sticks</title>
      <link>https://yuukidach.github.io/p/uva-oj-10003-cutting-sticks/</link>
      <pubDate>Tue, 27 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-10003-cutting-sticks/</guid>
      <description>Problem You have to cut a wood stick into pieces. The most affordable company, The Analog Cutting Machinery, Inc. (ACM), charges money according to the length of the stick being cut. Their procedure of work requires that they only make one cut at a time.
It is easy to notice that different selections in the order of cutting can led to different prices. For example, consider a stick of length 10 meters that has to be cut at 2, 4 and 7 meters from one end.</description>
    </item>
    
    <item>
      <title>UVa OJ 1625 - Color Length</title>
      <link>https://yuukidach.github.io/p/uva-oj-1625-color-length/</link>
      <pubDate>Tue, 27 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1625-color-length/</guid>
      <description>Problem Here is the prolem link
Solution 这道题目要先处理好每个颜色的起止位置，不然会很不方便。用数组d[i][j]表示已经插入了第一个字符串的i个，第二个字符串的j个字母。递推的时候，只要发现还有字母没有用完，就加1
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;using namespace std; const int maxn = 5002; char n[maxn], m[maxn]; int cas, l1, l2; int begs[2][26], endz[2][26], d[maxn][maxn]; void findLetter(char a[], int l, int o) { for (int i = 1; i &amp;lt;= l; ++i) { if (!endz[o][a[i]-&amp;#39;A&amp;#39;]) begs[o][a[i]-&amp;#39;A&amp;#39;] = i; endz[o][a[i]-&amp;#39;A&amp;#39;] = i; } } int main() { ios::sync_with_stdio(false); cin.tie(NULL); //freopen(&amp;#34;input.txt&amp;#34; , &amp;#34;r&amp;#34;, stdin );  //freopen(&amp;#34;output.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout);  cin &amp;gt;&amp;gt; cas; while(cas--) { cin &amp;gt;&amp;gt; n+1 &amp;gt;&amp;gt; m+1; n[0] = m[0] = 0; memset(begs, 0x3f, sizeof(begs)); memset(endz, 0, sizeof(endz)); l1 = strlen(n+1); l2 = strlen(m+1); findLetter(n, l1, 0); findLetter(m, l2, 1); for (int i = 0; i &amp;lt;= l1; ++i) { for (int j = 0; j &amp;lt;= l2; ++j) { int num = 0, ans = 0x3f3f3f3f; for (int k = 0; k &amp;lt; 26; ++k) if ((i &amp;gt;= begs[0][k] || j &amp;gt;= begs[1][k]) &amp;amp;&amp;amp; (i &amp;lt; endz[0][k] || j &amp;lt; endz[1][k])) ++num; if (i) ans = min(d[i-1][j], ans); if (j) ans = min(ans, d[i][j-1]); d[i][j] = (ans==0x3f3f3f3f?</description>
    </item>
    
    <item>
      <title>UVa OJ 11584 - Partitioning by Palindromes</title>
      <link>https://yuukidach.github.io/p/uva-oj-11584-partitioning-by-palindromes/</link>
      <pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-11584-partitioning-by-palindromes/</guid>
      <description>Problem Here is the: link
Solution 先对字符串进行预处理，把回文字符串的长度全部记录下来，然后用DP对回文字符串的个数进行处理。最小个数=min(之前已经处理过的长度所含回文字符串的最小值+未处理的长度所含回文字符数的最小值)
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;using namespace std; const int maxn = 1005; char s[maxn]; int d[maxn], idx[maxn][maxn], cas; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); //freopen(&amp;#34;input.txt&amp;#34; , &amp;#34;r&amp;#34;, stdin );  //freopen(&amp;#34;output.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout);  cin &amp;gt;&amp;gt; cas; while(cas--) { cin &amp;gt;&amp;gt; s+1; int n = strlen(s+1); memset(d, 0x3f, sizeof(d)); d[0] = 0; for (int i = 1; i &amp;lt;= n; ++i) { idx[i][i] = 1; for (int j = i+1; j &amp;lt;= n; ++j) { bool isOK = false; for (int k = 0; k &amp;lt; (j-i+1&amp;gt;&amp;gt;1); ++k) if (s[i+k] !</description>
    </item>
    
    <item>
      <title>UVa OJ 116 - Unidirectional TSP</title>
      <link>https://yuukidach.github.io/p/uva-oj-116-unidirectional-tsp/</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-116-unidirectional-tsp/</guid>
      <description>Problem Here is the: problem link
Solutions 这道题目不难，但是要注意一下输出的格式，我因为输出格式的问题反复提交了好几次
我们用dp[i][j]来表示(i,j)距离最后一列的距离。为了节省时间，用了一个Next[]数组来保存向右走的路径，避免反复取余造成的时间上的浪费。
还有，记得不要用next和end，是关键字 =_=
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;cstdio&amp;gt;using namespace std; int r, c, start, End; int Next[12]; int block[12][102], idx[12][102]; long dp[12][102]; int main(){ ios::sync_with_stdio(false); cin.tie(NULL); //freopen(&amp;#34;input.txt&amp;#34; , &amp;#34;r&amp;#34;, stdin );  //freopen(&amp;#34;output.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout);  while(cin &amp;gt;&amp;gt; r &amp;gt;&amp;gt; c) { memset(idx, 0, sizeof(idx)); memset(dp, 0, sizeof(dp)); for (int i = 1; i &amp;lt;= r; ++i) Next[i] = i; Next[r+1] = 1; Next[0] = r; for (int i = 1; i &amp;lt;= r; ++i) for (int j = 1; j &amp;lt;= c; ++j) cin &amp;gt;&amp;gt; block[i][j]; for (int j = c; j &amp;gt; 0; --j) { for (int i = 1; i &amp;lt;= r; ++i) { long tmp = 0x3f3f3f3f3f3f; for (int k = -1; k &amp;lt; 2; ++k) { long a = dp[Next[i+k]][j+1]+block[i][j]; if (a &amp;lt; tmp) { tmp = dp[i][j] = a; idx[i][j] = Next[i+k]; } else if (a == tmp) idx[i][j] = min(idx[i][j], Next[i+k]); } } } start = 1; long tmp, minh = dp[1][1]; for (int i = 2; i &amp;lt;= r; ++i) { tmp = dp[i][1]; if (tmp &amp;lt; minh) { start = i; minh = tmp; } } End = start; for(int j = 1; j &amp;lt; c; ++j) { cout &amp;lt;&amp;lt; End &amp;lt;&amp;lt; &amp;#39; &amp;#39;; End = idx[End][j]; } cout &amp;lt;&amp;lt; End &amp;lt;&amp;lt; &amp;#39;\n&amp;#39; &amp;lt;&amp;lt; dp[start][1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } return 0; } </description>
    </item>
    
    <item>
      <title>UVa OJ 12563 - Jin Ge Jin Qu hao</title>
      <link>https://yuukidach.github.io/p/uva-oj-12563-jin-ge-jin-qu-hao/</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-12563-jin-ge-jin-qu-hao/</guid>
      <description>Problem Here is the: link
Solution 这道题目一开始用时间作为一个大循环去进行递推，但是发现并不是很好判断歌曲是否有唱过，所以后来还是采用歌曲作为大循环，再以时间为小循环。不过记得要留出1s来给《劲歌金曲》
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;using namespace std; int T, n, t, cas, ans; int song[51], dp[9001]; long long lis[9001]; int main() { ios_base::sync_with_stdio(false); cin.tie(NULL); //freopen(&amp;#34;input.txt&amp;#34; , &amp;#34;r&amp;#34;, stdin );  //freopen(&amp;#34;output.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout);  cin &amp;gt;&amp;gt; T; while(T--) { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; t; memset(dp, 0x8f, sizeof(dp)); dp[0] = 0; ans = t-1; for (int i = 0; i &amp;lt; n; ++i) cin &amp;gt;&amp;gt; song[i]; for (int i = 0; i &amp;lt; n; ++i) for (int j = t-1; j &amp;gt;= song[i]; --j) dp[j] = max(dp[j], dp[j-song[i]]+1); for (int i = t-1; i &amp;gt;=0; --i) ans = dp[i]&amp;gt;dp[ans] ?</description>
    </item>
    
    <item>
      <title>UVa OJ 1347 - Tour</title>
      <link>https://yuukidach.github.io/p/uva-oj-1347-tour/</link>
      <pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1347-tour/</guid>
      <description>Problem John Doe, a skilled pilot, enjoys traveling. While on vacation, he rents a small plane and starts visiting beautiful places. To save money, John must determine the shortest closed tour that connects his destinations. Each destination is represented by a point in the plane pi = &amp;lt; xi, yi &amp;gt; . John uses the following strategy: he starts from the leftmost point, then he goes strictly left to right to the rightmost point, and then he goes strictly right back to the starting point.</description>
    </item>
    
    <item>
      <title>UVa OJ 437 - The Tower of Babylon</title>
      <link>https://yuukidach.github.io/p/uva-oj-437-the-tower-of-babylon/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-437-the-tower-of-babylon/</guid>
      <description>Problem The babylonians had n types of blocks, and an unlimited supply of blocks of each type. Each type-i block was a rectangular solid with linear dimensions (xi, yi, zi). A block could be reoriented so that any two of its three dimensions determined the dimensions of the base and the other dimension was the height.
They wanted to construct the tallest tower possible by stacking blocks. The problem was that, in building a tower, one block could only be placed on top of another block as long as the two base dimensions of the upper block were both strictly smaller than the corresponding base dimensions of the lower block.</description>
    </item>
    
    <item>
      <title>UVa OJ 714 - Copying Books</title>
      <link>https://yuukidach.github.io/p/uva-oj-714-copying-books/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-714-copying-books/</guid>
      <description>Problem Here is the Problem Link
Solution 在车站有三种选择：1.等；2.向右走 3.向左走
我们从约定的地点和约定的时间倒回来考虑，如果能够在0（初始时刻）回到车站1,就表示能够完成。
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;cstdio&amp;gt;using namespace std; int n, T, m1, m2, cas;; int t[55], d[255], e[255]; int fromRight[205][55], fromLeft[205][55], takeTime[205][55]; void init() { memset(fromLeft, 0, sizeof(fromLeft )); memset(fromRight, 0, sizeof(fromRight)); cin &amp;gt;&amp;gt; T; for (int i = 1; i &amp;lt; n ; ++i) cin &amp;gt;&amp;gt; t[i]; cin &amp;gt;&amp;gt; m1; for (int i = 1; i &amp;lt;= m1; ++i) { cin &amp;gt;&amp;gt; d[i]; int tmp = d[i]; fromLeft[tmp][1] = 1; for (int j = 1; j &amp;lt; n; ++j) { tmp += t[j]; if (tmp &amp;lt;= T) fromLeft[tmp][j+1] = 1; else break; } } cin &amp;gt;&amp;gt; m2; for (int i = 1; i &amp;lt;= m2; ++i) { cin &amp;gt;&amp;gt; e[i]; int tmp = e[i]; fromRight[tmp][n] = 1; for (int j = n-1; j &amp;gt; 1; --j) { tmp += t[j]; if (tmp &amp;lt;= T) fromRight[tmp][j] = 1; else break; } } memset(takeTime, 0x3f, sizeof(takeTime)); takeTime[T][n] = 0; } int main() { ios_base::sync_with_stdio(false); cin.</description>
    </item>
    
    <item>
      <title>UVa OJ 12265 - Selling Land</title>
      <link>https://yuukidach.github.io/p/uva-oj-12265-selling-land/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-12265-selling-land/</guid>
      <description>Problem 输入一个n*m(1≤n,m≤1000)矩阵,每个格子可能是空地,也可能是沼泽。对于每个空地格子,求出以它为右下角的空矩形的最大周长,然后统计每个周长出现了多少次。
Input On the first line a positive integer: the number of test cases, at most 100. After that per test case:
 One line with two integers n and m (1 ≤ n, m ≤ 1000): the dimensions of Per’s parcel. n lines, each with m characters. Each character is either ‘#’ or ‘.’. The j-th character on the i-th line is a ‘#’ if position (i, j) is a swamp, and ‘.</description>
    </item>
    
    <item>
      <title>UVa OJ 1442 - Cav</title>
      <link>https://yuukidach.github.io/p/uva-oj-1442-cav/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1442-cav/</guid>
      <description>Problem Link: 1442 - Cav
Solution Use greedy algorithm to deal with this problem.
Adjust the height of ceiling to fit the requirements.
Here is the code:
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt;using namespace std; const int maxn = 1e6+5; int cas, n, cnt; int ceiling[maxn], floor[maxn]; int main() { ios::sync_with_stdio(false); cin.tie(0); //freopen(&amp;#34;input.txt&amp;#34; , &amp;#34;r&amp;#34;, stdin );  //freopen(&amp;#34;output.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout);  cin &amp;gt;&amp;gt; cas; while(cas--) { cnt = 0; cin &amp;gt;&amp;gt; n; for (int i = 0; i &amp;lt; n; ++i) cin &amp;gt;&amp;gt; floor[i]; for (int i = 0; i &amp;lt; n; ++i) cin &amp;gt;&amp;gt; ceiling[i]; int tmp = maxn; for (int i = 0; i &amp;lt; n; ++i) { tmp = min(tmp, ceiling[i]); tmp = max(tmp, floor[i]); ceiling[i] = tmp; } tmp = maxn; for (int i = n-1; i &amp;gt; -1; --i) { tmp = min(tmp, ceiling[i]); tmp = max(tmp, floor[i]); ceiling[i] = tmp; cnt += ceiling[i] - floor[i]; } cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } return 0; } </description>
    </item>
    
    <item>
      <title>UVa OJ 1608 - Non-boring sequences</title>
      <link>https://yuukidach.github.io/p/uva-oj-1608-non-boring-sequences/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1608-non-boring-sequences/</guid>
      <description>Problem A sequence is called non-boring if its every connected subsequence contains a unique element, i.e. an element such that no other element of that subsequence has the same value.
Given a sequence of integers, decide whether it is non-boring.
Input The first line of the input contains the number of test cases T. The descriptions of the test cases follow:
Each test case starts with an integer n (1 ≤ n ≤ 200000) denoting the length of the sequence.</description>
    </item>
    
    <item>
      <title>UVa OJ 12174 - Shuffle</title>
      <link>https://yuukidach.github.io/p/uva-oj-12174-shuffle/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-12174-shuffle/</guid>
      <description>Problem You are listening to your music collection using the shuffle function to keep the music surprising. You assume that the shuffle algorithm of your music player makes a random permutation of the songs in the playlist and plays the songs in that order until all songs have been played. Then it reshuffles and starts playing the list again.
You have a history of the songs that have been played. However, your record of the history of played songs is not complete, as you started recording songs at a certain point in time and a number of songs might already have been played.</description>
    </item>
    
    <item>
      <title>UVa OJ 1607 - Gates</title>
      <link>https://yuukidach.github.io/p/uva-oj-1607-gates/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1607-gates/</guid>
      <description>Problem 描述起来很麻烦，大家还是直接去OJ站看吧。我之后也会解释一下题目的意思
题目链接： 1607 - Gates
Input The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 ≤ d ≤ 20. The data sets follow.
Each data set consists of two consecutive lines. The rst of those lines contains exactly two positive integers n and m separated by single space, 1 ≤ n ≤ 100.000, 1 ≤ m ≤ 200.000. Integer n is the number of the net inputs and integer m is the number of the gates in the net.</description>
    </item>
    
    <item>
      <title>UVa OJ 11093 - Just Finish it up</title>
      <link>https://yuukidach.github.io/p/uva-oj-11093-just-finish-it-up/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-11093-just-finish-it-up/</guid>
      <description>Problem Along a circular track, there are N gas stations, which are numbered clockwise from 1 up to N. At station i, there are pi gallons of petrol available. To race from station i to its clockwise neighbor one need qi gallons of petrol. Consider a race where a car will start the race with an empty fuel tank. Your task is to find whether the car can complete the race from any of the stations or not.</description>
    </item>
    
    <item>
      <title>UVa OJ 12627 - Erratic Expansion</title>
      <link>https://yuukidach.github.io/p/uva-oj-12627-erratic-expansion/</link>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-12627-erratic-expansion/</guid>
      <description>Problem 这个问题要带图才能方便理解题意，这里为了节省时间，大家自己去网站看题目就好。我真是太懒了 :p
Input The first line of input is an integer T (T &amp;lt; 1000) that indicates the number of test cases. Each case contains 3 integers K, A and B. The meanings of these variables are mentioned above. K will be in the range [0, 30] and 1 ≤ A ≤ B ≤ 2K.
Output For each case, output the case number followed by the total number of red balloons in rows [A, B] after K-th hour.</description>
    </item>
    
    <item>
      <title>UVa OJ 10954 - Add All</title>
      <link>https://yuukidach.github.io/p/uva-oj-10954-add-all/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-10954-add-all/</guid>
      <description>Problem 有n（n≤5000）个数的集合S，每次可以从S中删除两个数，然后把它们的和放回集合， 直到剩下一个数。每次操作的开销等于删除的两个数之和，求最小总开销。所有数均小于 105。
Input Each test case will start with a positive number, N (2 ≤ N ≤ 5000) followed by N positive integers (all are less than 100000). Input is terminated by a case where the value of N is zero. This case should not be processed.
Output For each case print the minimum total cost of addition in a single line.
Sample Input 3 1 2 3 4 1 2 3 4 0 Sample Output 9 19 Solution 题目很简单，就是最小的两个数相加，用优先队列只要几行代码就能完成。但是我为什么还要发一篇文章呢？因为通过这道题目，我知道了一个新的头文件 &amp;lt;functional&amp;gt; .</description>
    </item>
    
    <item>
      <title>UVa OJ 714 - Copying Books</title>
      <link>https://yuukidach.github.io/p/uva-oj-714-copying-books/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-714-copying-books/</guid>
      <description>Problem 把一个包含m个正整数的序列划分成k个（1≤k≤m≤500）非空的连续子序列，使得每个正 整数恰好属于一个序列。设第i个序列的各数之和为S(i)，你的任务是让所有S(i)的最大值尽 量小。例如，序列1 2 3 2 5 4划分成3个序列的最优方案为1 2 3 | 2 5 | 4，其中S(1)、S(2)、S(3) 分别为6、7、4，最大值为7；如果划分成1 2 | 3 2 | 5 4，则最大值为9，不如刚才的好。每个 整数不超过107。如果有多解，S(1)应尽量小。如果仍然有多解，S(2)应尽量小，依此类推
Input The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly two lines. At the first line, there are two integers m and k, 1 ≤ k ≤ m ≤ 500.</description>
    </item>
    
    <item>
      <title>UVa OJ 1451 - Average</title>
      <link>https://yuukidach.github.io/p/uva-oj-1451-average/</link>
      <pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1451-average/</guid>
      <description>Problem 给定一个长度为n的01串，选一个长度至少为L的连续子串，使得子串中数字的平均值最 大。如果有多解，子串长度应尽量小；如果仍有多解，起点编号尽量小。序列中的字符编号 为1～n，因此[1,n]就是完整的字符串。1≤n≤100000，1≤L≤1000。
例如，对于如下长度为17的序列00101011011011010，如果L=7，最大平均值为6/8（子 序列为[7,14]，其长度为8）；如果L=5，子序列[7,11]的平均值最大，为4/5。
Input Your program is to read from standard input. The input consists of T test cases. The number of test cases T is given in the first line of the input. Each test case starts with a line containing two integers n (1 ≤ n ≤ 100, 000) and L (1 ≤ L ≤ 1, 000) which are the length of a binary sequence and a length lower bound, respectively.</description>
    </item>
    
    <item>
      <title>UVa OJ 1471 - Defense Lines</title>
      <link>https://yuukidach.github.io/p/uva-oj-1471-defense-lines/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1471-defense-lines/</guid>
      <description>Problem After the last war devastated your country, you - as the king of the land of Ardenia - decided it was high time to improve the defense of your capital city. A part of your fortification is a line of mage towers, starting near the city and continuing to the northern woods. Your advisors determined that the quality of the defense depended only on one factor: the length of a longest contiguous tower sequence of increasing heights.</description>
    </item>
    
    <item>
      <title>UVa OJ 1152 - 4 Values whose Sum is 0</title>
      <link>https://yuukidach.github.io/p/uva-oj-1152-4-values-whose-sum-is-0/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1152-4-values-whose-sum-is-0/</guid>
      <description>Problem 给定4个n（1≤n≤4000）元素集合A, B, C, D，要求分别从中选取一个元素a, b, c, d，使得 a+b+c+d=0。问：有多少种选法？
Input The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs.
 The first line of the input file contains the size of the lists n (this value can be as large as 4000).</description>
    </item>
    
    <item>
      <title>UVa OJ 1605 - Building for UN</title>
      <link>https://yuukidach.github.io/p/uva-oj-1605-building-for-un/</link>
      <pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1605-building-for-un/</guid>
      <description>Problem  你的任务是设计一个包含若干层的联合国大楼，其中每层都是一个等大的网格。有若干 国家需要在联合国大楼里办公，你需要把每个格子分配给一个国家，使得任意两个不同的国 家都有一对相邻的格子（要么是同层中有公共边的格子，要么是相邻层的同一个格子）。你设计的大厦最多不能超过1000000个格子。
Input  输入国家的个数n（n≤50）。
Output  输出大楼的层数H、每层楼的行数W和列数L，然后是每层 楼的平面图.不同的国家用不同的大小写字母表示。
Sample Input 4 Sample Output 2 2 2 AB CC zz zz Solution  这个题目没有给定楼层限制，也没有给定国家占地的限制，那么就显得很简单了。因为只需要保证每一个国家和另外一个国家的办公室都有邻边。那么我们可以直接把第一层的每个行分给不同的国家，然后第二层的每个列也分给不同的国家，问题就解决了。下面是简单而粗糙的代码
#include &amp;lt;cstdio&amp;gt;using namespace std; int main(){ int n,contry[55]; while (scanf(&amp;#34;%d&amp;#34;, &amp;amp;n) == 1){ printf(&amp;#34;%d %d %d\n&amp;#34;, 2, n, n); for (int i = 0; i &amp;lt; n; ++i){ for (int j = 0; j &amp;lt; n; ++j) printf(&amp;#34;%c&amp;#34;, i &amp;lt; 26 ? &amp;#39;a&amp;#39; + i : &amp;#39;A&amp;#39; + i - 26); putchar(&amp;#39;\n&amp;#39;); } putchar(&amp;#39;\n&amp;#39;); for (int i = 0; i &amp;lt; n; ++i){ for (int j = 0; j &amp;lt; n; ++j) printf(&amp;#34;%c&amp;#34;, j &amp;lt; 26 ?</description>
    </item>
    
    <item>
      <title>UVa OJ 120 - Stacks of Flapjacks</title>
      <link>https://yuukidach.github.io/p/uva-oj-120-stacks-of-flapjacks/</link>
      <pubDate>Sat, 06 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-120-stacks-of-flapjacks/</guid>
      <description>Problem  有一叠煎饼正在锅里。煎饼共有n（n≤30）张，每张都有一个数字，代表它的大小，如 图8-11所示。厨师每次可以选择一个数k，把从锅底开始数第k张上面的煎饼全部翻过来，即 原来在上面的煎饼现在到了下面。
 设计一种方法使得所有煎饼按照从小到大排序（最上面的煎饼最小）。输入时，各个煎 饼按照从上到下的顺序给出。
Input The input consists of a sequence of stacks of pancakes. Each stack will consist of between 1 and 30 pancakes and each pancake will have an integer diameter between 1 and 100. The input is terminated by end-of-file. Each stack is given as a single line of input with the top pancake on a stack appearing first on a line, the bottom pancake appearing last, and all pancakes separated by a space.</description>
    </item>
    
    <item>
      <title>UVa OJ 11212 - Editing a Book</title>
      <link>https://yuukidach.github.io/p/uva-oj-11212-editing-a-book/</link>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-11212-editing-a-book/</guid>
      <description>&lt;h1 id=&#34;problem&#34;&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;  你有一篇由n（2≤n≤9）个自然段组成的文章，希望将它们排列成1, 2,…, n。可以用 Ctrl+X（剪切）和Ctrl+V（粘贴）快捷键来完成任务。每次可以剪切一段连续的自然段，粘贴时按照顺序粘贴。注意，剪贴板只有一个，所以不能连续剪切两次，只能剪切和粘贴交替。&lt;/p&gt;
&lt;p&gt;  例如，为了将{2,4,1,5,3,6}变为升序，可以剪切1将其放到2前，然后剪切3将其放到4 前。再如，对于排列{3,4,5,1,2}，只需一次剪切和一次粘贴即可——将{3,4,5}放在{1,2}后， 或者将{1,2}放在{3,4,5}前。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
