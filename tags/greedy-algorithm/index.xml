<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Greedy Algorithm on Dash&#39;s Blog</title>
    <link>https://yuukidach.github.io/tags/greedy-algorithm/</link>
    <description>Recent content in Greedy Algorithm on Dash&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Sep 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://yuukidach.github.io/tags/greedy-algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UVa OJ 1442 - Cav</title>
      <link>https://yuukidach.github.io/p/uva-oj-1442-cav/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-1442-cav/</guid>
      <description>Problem Link: 1442 - Cav
Solution Use greedy algorithm to deal with this problem.
Adjust the height of ceiling to fit the requirements.
Here is the code:
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdio&amp;gt;using namespace std; const int maxn = 1e6+5; int cas, n, cnt; int ceiling[maxn], floor[maxn]; int main() { ios::sync_with_stdio(false); cin.tie(0); //freopen(&amp;#34;input.txt&amp;#34; , &amp;#34;r&amp;#34;, stdin );  //freopen(&amp;#34;output.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout);  cin &amp;gt;&amp;gt; cas; while(cas--) { cnt = 0; cin &amp;gt;&amp;gt; n; for (int i = 0; i &amp;lt; n; ++i) cin &amp;gt;&amp;gt; floor[i]; for (int i = 0; i &amp;lt; n; ++i) cin &amp;gt;&amp;gt; ceiling[i]; int tmp = maxn; for (int i = 0; i &amp;lt; n; ++i) { tmp = min(tmp, ceiling[i]); tmp = max(tmp, floor[i]); ceiling[i] = tmp; } tmp = maxn; for (int i = n-1; i &amp;gt; -1; --i) { tmp = min(tmp, ceiling[i]); tmp = max(tmp, floor[i]); ceiling[i] = tmp; cnt += ceiling[i] - floor[i]; } cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } return 0; } </description>
    </item>
    
    <item>
      <title>UVa OJ 714 - Copying Books</title>
      <link>https://yuukidach.github.io/p/uva-oj-714-copying-books/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yuukidach.github.io/p/uva-oj-714-copying-books/</guid>
      <description>Problem 把一个包含m个正整数的序列划分成k个（1≤k≤m≤500）非空的连续子序列，使得每个正 整数恰好属于一个序列。设第i个序列的各数之和为S(i)，你的任务是让所有S(i)的最大值尽 量小。例如，序列1 2 3 2 5 4划分成3个序列的最优方案为1 2 3 | 2 5 | 4，其中S(1)、S(2)、S(3) 分别为6、7、4，最大值为7；如果划分成1 2 | 3 2 | 5 4，则最大值为9，不如刚才的好。每个 整数不超过107。如果有多解，S(1)应尽量小。如果仍然有多解，S(2)应尽量小，依此类推
Input The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly two lines. At the first line, there are two integers m and k, 1 ≤ k ≤ m ≤ 500.</description>
    </item>
    
  </channel>
</rss>
