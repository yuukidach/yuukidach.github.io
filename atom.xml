<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dash&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yuukidach.github.io/"/>
  <updated>2020-11-19T08:17:29.707Z</updated>
  <id>http://yuukidach.github.io/</id>
  
  <author>
    <name>Dash</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Decision Tree and k-Nearest Neighbors Learning</title>
    <link href="http://yuukidach.github.io/2020/11/18/ml/decision-tree-and-knn-learning/"/>
    <id>http://yuukidach.github.io/2020/11/18/ml/decision-tree-and-knn-learning/</id>
    <published>2020-11-18T13:02:19.285Z</published>
    <updated>2020-11-19T08:17:29.707Z</updated>
    
    <content type="html"><![CDATA[<p>test</p><p>aaaa</p><script type="math/tex; mode=display">A = \begin{bmatrix}        a_{11}    & a_{12}    & ...    & a_{1n}\\        a_{21}    & a_{22}    & ...    & a_{2n}\\        a_{31}    & a_{22}    & ...    & a_{3n}\\        \vdots    & \vdots    & \ddots & \vdots\\        a_{n1}    & a_{n2}    & ... & a_{nn}\\    \end{bmatrix} , b = \begin{bmatrix}        b_{1}  \\        b_{2}  \\        b_{3}  \\        \vdots \\        b_{n}  \\    \end{bmatrix}</script><p>change</p><script type="math/tex; mode=display">a = a \times b \\this is a newline</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;test&lt;/p&gt;
&lt;p&gt;aaaa&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
A = \begin{bmatrix}
        a_{11}    &amp; a_{12}    &amp; ...    &amp; a_{1n}\\
       
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yuukidach.github.io/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>自己到底是一个什么样的人呢</title>
    <link href="http://yuukidach.github.io/2020/11/18/chitchat/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA/"/>
    <id>http://yuukidach.github.io/2020/11/18/chitchat/我是一个怎样的人/</id>
    <published>2020-11-17T16:00:00.000Z</published>
    <updated>2020-11-18T03:50:39.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h1><h1 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h1><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;过去&quot;&gt;&lt;a href=&quot;#过去&quot; class=&quot;headerlink&quot; title=&quot;过去&quot;&gt;&lt;/a&gt;过去&lt;/h1&gt;&lt;h1 id=&quot;现在&quot;&gt;&lt;a href=&quot;#现在&quot; class=&quot;headerlink&quot; title=&quot;现在&quot;&gt;&lt;/a&gt;现在&lt;/h1&gt;&lt;h1 id
      
    
    </summary>
    
      <category term="Chitchat" scheme="http://yuukidach.github.io/categories/Chitchat/"/>
    
    
  </entry>
  
  <entry>
    <title>Transaction and Concurrency Control</title>
    <link href="http://yuukidach.github.io/2020/11/13/database/xact_and_concurrency_ctrl/"/>
    <id>http://yuukidach.github.io/2020/11/13/database/xact_and_concurrency_ctrl/</id>
    <published>2020-11-12T16:00:00.000Z</published>
    <updated>2020-11-18T03:27:24.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><strong>Transaction:</strong> A sequence of multiple actions to be executed as an <em>atomic</em> unit.</p><p>Transaction in SQL view:</p><ul><li>Begin transaction</li><li>Sequence of SQL statements</li><li>End transaction</li></ul><p>Transaction Manager controls excution of transactions. Program logic is invisible to DBMS. For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="keyword">start</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">read</span>(R)</span><br><span class="line"><span class="number">3.</span> R = R - <span class="number">100</span>  <span class="comment">------&gt; Invisible</span></span><br><span class="line"><span class="number">4.</span> write(R)</span><br><span class="line"><span class="number">5.</span> <span class="keyword">read</span>(S)</span><br><span class="line"><span class="number">6.</span> S = S + <span class="number">100</span>  <span class="comment">------&gt; Invisible</span></span><br><span class="line"><span class="number">7.</span> write(S)</span><br><span class="line"><span class="number">8.</span> <span class="keyword">end</span> <span class="keyword">transaction</span></span><br></pre></td></tr></table></figure><h3 id="ACID-Properties"><a href="#ACID-Properties" class="headerlink" title="ACID Properties"></a>ACID Properties</h3><p><strong>A</strong> tomicity: All actions in the transaction happen, or none happen.<br><strong>C</strong> onsistency: If the database starts our consistent, it ends up consistent at the end of the transaction.<br><strong>I</strong> solation: Execution of each transaction is isolated from that of others.<br><strong>D</strong> urability: If a transaction commits, its effect persist.</p><p>Note:</p><ol><li>For <code>isolation</code>, it’s <strong>just</strong> the <em>excution</em> not being affected.</li><li><code>Consistency</code> in database system refers to the requirement that any given DB transaction must change affected data only in allowed ways. (<a href="https://en.wikipedia.org/wiki/Consistency_(database_systems">wiki</a>#:~:text=Consistency%20in%20database%20systems%20refers,triggers%2C%20and%20any%20combination%20thereof.))</li></ol><h2 id="Concurrency-Control"><a href="#Concurrency-Control" class="headerlink" title="Concurrency Control"></a>Concurrency Control</h2><p><strong>Serial schedule:</strong> Each transaction runs from start to finish without any intervening actions from other transactions.</p><p><strong>Equivalent:</strong> Two Schedules are <em>equivalent</em>, when:</p><ol><li>involve same transaction</li><li>each individual transaction’s actions are ordered the same</li><li>both schedules leave the DB in the same final state</li></ol><p><strong>Serializable</strong>: A serial is equivalent to some serial schedule.</p><p><strong>Conflict:</strong> Two <em>oprations</em> are conflict, when:</p><ol><li>Are by different transactions</li><li>Are on the same object</li><li>At least one is write</li></ol><blockquote><p>Order of non-conflict operations has no effect on the final state of the DB.</p></blockquote><p><strong>Conflict equivalent:</strong></p><ol><li>involve the same actions of the same transactions</li><li>every pair of conflicting actions is ordered the same way</li></ol><p><strong>Conflict serializable:</strong></p><ol><li>the serial is conflict equivalent to some serial schedule</li><li>the serial is also serializable</li></ol><blockquote><p>Some serializable schedule is not conflict serializable.</p></blockquote><p>Example:</p><p>a. conflict serializable</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T1: R(A) W(A)           R(B) W(B)</span><br><span class="line">T2:           R(A) W(A)           R(B) W(B)</span><br></pre></td></tr></table></figure><p>b. not conflict serializable</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T1: R(A)           W(A)</span><br><span class="line">T2:      R(A) W(A)</span><br><span class="line"></span><br><span class="line">It is serializable but not conflict serializable</span><br></pre></td></tr></table></figure><p><strong>View serializable:</strong></p><ol><li>same initial reads</li><li>same dependent reads</li><li>same winning writes (If Ti writes finial value of A in S1, then Ti also writes final value of A in S2)</li></ol><h2 id="Two-Phase-Locking-2PL"><a href="#Two-Phase-Locking-2PL" class="headerlink" title="Two Phase Locking (2PL)"></a>Two Phase Locking (2PL)</h2><p>Rules: transaction must obtain as S (shared) lock before reading, and an X (exclusive) lock before writing.</p><p><strong>2PL guarantees conflict serializability.</strong></p><p>2PL —————&gt; Release one by one<br>strict 2PL —-&gt; Release at the same time</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Transaction&quot;&gt;&lt;a href=&quot;#Transaction&quot; class=&quot;headerlink&quot; title=&quot;Transaction&quot;&gt;&lt;/a&gt;Transaction&lt;/h2&gt;&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definit
      
    
    </summary>
    
      <category term="Database" scheme="http://yuukidach.github.io/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>My Manjaro i3 Configurations</title>
    <link href="http://yuukidach.github.io/2020/11/03/manjaro_conf/"/>
    <id>http://yuukidach.github.io/2020/11/03/manjaro_conf/</id>
    <published>2020-11-02T16:00:00.000Z</published>
    <updated>2020-11-09T03:13:04.590Z</updated>
    
    <content type="html"><![CDATA[<p>Manjaro edition: Manjaro-i3</p><p>This post is about how I configure my Manjaro i3</p><h2 id="Softwares-to-Install"><a href="#Softwares-to-Install" class="headerlink" title="Softwares to Install"></a>Softwares to Install</h2><ol><li>fcitx5 (no need to install sogou pinyin for linux anymore)</li><li>deepin-wine-wechat</li><li>deepin-wine-tim</li><li>wps-office (together with <code>ttf-wps-fonts</code>)</li><li>ttf-menlo-powerline-git (font for terminal)</li><li>mpv (vedio player)</li><li>netease-cloud-music</li><li>Insync (sync a certain folder with google driver)</li><li>variety (wallpaper software)</li><li>picom</li><li>albert (a fast launcher)</li><li>vim (with <a href="https://github.com/chxuan/vimplus">vimplus</a>)</li><li>flameshot (screen capture tool)</li><li>nerd-fonts-jetbrains-mono (font for vscode)</li></ol><h2 id="Multiple-Monitors"><a href="#Multiple-Monitors" class="headerlink" title="Multiple Monitors"></a>Multiple Monitors</h2><p>When we plug a HDMI/VGA cable into the computer, Manjaro i3 will not automatically display content in the external monitor. We need to use <code>xrandr</code> to set the display mode.</p><p>More specific usage can be found here: <a href="https://i3wm.org/docs/userguide.html#multi_monitor">Multiple monitors</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Manjaro edition: Manjaro-i3&lt;/p&gt;
&lt;p&gt;This post is about how I configure my Manjaro i3&lt;/p&gt;
&lt;h2 id=&quot;Softwares-to-Install&quot;&gt;&lt;a href=&quot;#Softwares
      
    
    </summary>
    
      <category term="Linux" scheme="http://yuukidach.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Use Oracle on Docker for Windows</title>
    <link href="http://yuukidach.github.io/2020/10/20/database/Oracle-docker-for-win10/"/>
    <id>http://yuukidach.github.io/2020/10/20/database/Oracle-docker-for-win10/</id>
    <published>2020-10-19T16:00:00.000Z</published>
    <updated>2020-11-13T08:30:04.725Z</updated>
    
    <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th style="text-align:center">Environment</th><th style="text-align:center">version</th></tr></thead><tbody><tr><td style="text-align:center">WSL</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Docker Engine</td><td style="text-align:center">v19.03.13</td></tr><tr><td style="text-align:center">Oracle Database</td><td style="text-align:center">Enterprise 12.2.0.1</td></tr></tbody></table></div><h2 id="Install-WLS2"><a href="#Install-WLS2" class="headerlink" title="Install WLS2"></a>Install WLS2</h2><p>Check detailed and official document <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">here</a>.</p><h3 id="Problems-I-encountered"><a href="#Problems-I-encountered" class="headerlink" title="Problems I encountered"></a>Problems I encountered</h3><p>1. Use any commands related to WSL2 will cause error： “The attempted operation is not supported for the type of object referenced.”</p><p>This is beacause the proxy software conflicts with the sock port of WSL2.</p><h4 id="Short-term-solution"><a href="#Short-term-solution" class="headerlink" title="Short term solution"></a>Short term solution</h4><p>Run command line as admin:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure><p>Then reboot computer.</p><h4 id="Long-term-solution"><a href="#Long-term-solution" class="headerlink" title="Long term solution"></a>Long term solution</h4><p>Download NoLsp.exe <a href="https://link.zhihu.com/?target=http%3A//www.proxifier.com/tmp/Test20200228/NoLsp.exe">here</a>.</p><p>Run command line as admin:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Location of NoLsp.exe&gt; C:\windows\system32\wsl.exe</span><br></pre></td></tr></table></figure><h2 id="Install-Docker-and-Oracle"><a href="#Install-Docker-and-Oracle" class="headerlink" title="Install Docker and Oracle"></a>Install Docker and Oracle</h2><p>Download docker desktop and pull the image like in <a href="https://dbtut.com/index.php/2020/01/09/how-to-install-oracle-database-in-docker/">this post</a>.</p><h2 id="Use-SQL-Developer"><a href="#Use-SQL-Developer" class="headerlink" title="Use SQL Developer"></a>Use SQL Developer</h2><p>Directly download and connection to the database.</p><h3 id="Problem-I-encountered"><a href="#Problem-I-encountered" class="headerlink" title="Problem I encountered"></a>Problem I encountered</h3><p>1. Invalid username / password</p><p>I’m still a newbie to database. I still don’t know why this happened. But the solution to this is to create a new user account in database system directly in docker. Then reboot and we can use the new accout to login.</p><p>Command to create a new user account:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; alter session set &quot;_ORACLE_SCRIPT&quot;=true;</span><br><span class="line">SQL&gt; create user &lt;username&gt; identified by &lt;password&gt;;</span><br><span class="line">SQL&gt; GRANT CONNECT, RESOURCE, DBA TO &lt;username&gt;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Environment&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;version&lt;/th&gt;
      
    
    </summary>
    
      <category term="Database" scheme="http://yuukidach.github.io/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>第一次辞职</title>
    <link href="http://yuukidach.github.io/2020/04/10/chitchat/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%BE%9E%E8%81%8C/"/>
    <id>http://yuukidach.github.io/2020/04/10/chitchat/第一次辞职/</id>
    <published>2020-04-09T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<p>距离本周一提出离职已经过去4天。在同CEO以及CTO都经过交流之后，终于思考清楚，也能好好地把事情做个记录。</p><center>[给人力的离职信全文](https://github.com/yuukidach/utility-room/blob/master/Kolmostar%E8%BE%9E%E8%81%8C%E4%BF%A1.md) </center>  <p>本次离职的直接原因是生病发烧，带来心态上的变化，根本原因还是对工作内容的不喜欢。在和两位老板交流时，他们都表达了挽留的意思。但是挽留的说法却不尽相同。</p><p>我是在周一晚上向CEO提出离职的，随后便进行了一次长达51分钟的电话聊天。聊天内容基本上是在问我对工作不满意的地方，以及我希望怎么样调整工作的方向。我个人对于CEO的印象还是非常不错的。年轻，没有架子，思辨性很强，对员工也极为友善，愿意培养新人。当初也是他直接省去了后续的面试，在两轮面试后，直接将我招进公司。在和他聊了这么多之后，我不由得感觉到一阵内疚加失落，这种感觉一直持续到周二结束。</p><p>一方面我个人觉得这样的老板之后确实是很难遇到了，另一方面，虽然我的离职想法早就确定了，但是在目前公司缺人的情况下突然提出来，还是有点惭愧。</p><p>为此我特意和我同样在工作的同学进行了短暂的意见交流，在得到他的支持意见后，我也逐渐安下心来。离职的想法也愈加坚定。</p><p>到了周五，即今天，和CTO交流时，老实说还是有些许紧张。浑身上下会不自觉的发抖。站在阳台的阳光中之后，这才停了下来。CTO的挽留相对于CEO来说，更为理性一些。首先是肯定了我做的一些贡献，表达了对我的欣赏，后续又说了一些未来工作的迁移方向，以及自己当初工作的一点经历。</p><p>必须得承认的是，我确实是被CTO的话语所打动。作为技术负责人，他对于我们所在做的事情，以及方向有很好的把握。对比CEO能描述出一个更为具体的发展计划、前景展望。在这一点上，是更让我心动的。</p><p>但是还是需要继续保持坚定的离职的态度。写这篇post，其实也是方便我对此进行梳理：</p><ol><li>虽然离职是周一提出来的，但是离职的想法是一直在的，最终还是要离开的。</li><li>读书已然势在必行。虽然我会担心疫情的影响，但是总体看法是乐观的。</li><li>公司的发展我认为前景无限，但是我对我自己未来的发展也抱有相对较高的期望。</li><li>公司的职位让我感觉到成长瓶颈。</li><li>其他人离职之后的发展也是不错的。</li></ol><p>具体时间线上，准备下周去公司交接，下下周回家，之后通过网络完成工作的收尾。</p><p>此次一别，想必是以后无法碰到现在的老板和同事了。大家都加油吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;距离本周一提出离职已经过去4天。在同CEO以及CTO都经过交流之后，终于思考清楚，也能好好地把事情做个记录。&lt;/p&gt;
&lt;center&gt;

[给人力的离职信全文](https://github.com/yuukidach/utility-room/blob/master/Ko
      
    
    </summary>
    
      <category term="Chitchat" scheme="http://yuukidach.github.io/categories/Chitchat/"/>
    
    
  </entry>
  
  <entry>
    <title>发烧带来的心态变化</title>
    <link href="http://yuukidach.github.io/2020/04/06/chitchat/%E5%8F%91%E7%83%A7%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%BF%83%E6%80%81%E5%8F%98%E5%8C%96/"/>
    <id>http://yuukidach.github.io/2020/04/06/chitchat/发烧带来的心态变化/</id>
    <published>2020-04-05T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<p>大概是在1月初的时候，我从隔壁工位的同事听说武汉出现了「不明原因的肺炎」。当时还不以为意，直到1月20日晚，准备回家过年的前一天，新闻上报道有肺炎扩散的趋势，自己这才开始重视起来。于是一向不喜欢戴口罩的我，在21日带着双层口罩出了门，乘地铁至火车站，后乘高铁回家。期间，在地铁上遇到的人，偶有一两个是佩戴了口罩的，其余人似乎都没受到肺炎相关新闻的影响。及至高铁，佩戴口罩的人稍多，但是大部分在列车发动一段时间后都摘了口罩，我自己亦是如此。只有邻座隔壁两人是除了吃午饭之外，始终保持佩戴的。见他们如此，我在午饭后也还是把口罩又重新戴了起来。</p><p>之后的事情就和网上大部分人的情况一样了。在1月22日，也就是法定节假日开始的这天，大部分年轻人已经意识到肺炎的严重性，口罩已经成为大家出门必备的物品了，而上年纪的人往往却并不太在意。我在家也不断提醒父母做好防护，并囤积好足够的口粮，建议他们不去参加大型的集会。陪他们去菜市场的时候，整个市场我所发现的佩戴口罩的人，也仅仅只有我一个。</p><p>在24日除夕过去之后，随着各项大型集会被取消，父母的防护意识开始被竖立起来，甚至一度比我更为紧张。</p><p>2月2日，在经过了一段时间的假期延长后，我按照公司要求回到北京。</p><p>在北京的头三周（大概），我一直在居家办公，偶尔会去公司拿点东西。每次出去都是心惊胆战，回来以后把出门的衣服全部脱下、清洗。</p><p>2月末3月初，一直到现在，我们变成了现场办公，上班时间11AM - 4PM 。这段时间也是国内疫情开始缓和期间。这段时间我通常都是10点多抵达公司，尔后4-5点下班。但是公司的同事都去得特别早，还是和之前一样9点到，让我有些许的尴尬和不解。尴尬在于，每次我去的时候大家基本都到了，不解在于，大家在早高峰上班，难道已经不担心肺炎的事情了吗。关于这段时间北京的交通，就我自己的经历，车流和人流都是逐渐增加的，最开始一辆公交车可能载0-3人，现在已经有人没有座位了，若是按照正常时间上下班，还会堵车。交通密集程度大致有平常的百分之九十。</p><p>在上述这段期间，国外的疫情开始显现出来。先是韩国和日本，日本的数据不太正常。暂且不论，韩国在不断加强检测力度后，逐渐被控制住。随后是伊朗，接着再是欧洲诸国，从意大利开始，疫情变得不可收拾，感染人数不断上升。现如今，美国报道出来的感染人数已经30万有余，实在是令人担忧。也正是如此，国内的疫情防控已经转变为防控境外输入了。北京作为首都，重要的交通枢纽，面临巨大的防控压力。这段时间看新闻，丝毫没有结束的迹象，倒是小城市已经没有什么危险了。有些人已经不戴口罩了。</p><p>说起来，现场办公的这段时间，我对疫情的紧张程度是慢慢降低的。昨天和室友以及一个跳槽的同事聊天，他们的公司都准备在这周都准备调整回正常现场办公（我们现场办公时间比较早，是因为我们公司规模小）。正当我觉得一切都要回归正常的时候，4月5日，也就是昨天，我在下午发烧了，38.2℃。我第一时间通知了我准备回来住的室友，之后联系了医院的大夫，并把发烧的事情告诉给家里人。随后在医生的建议和室友的压力下，我在晚上8点多前往发热门诊做了核酸检测，排除了新冠肺炎感染的可能性。</p><p>在发热门诊的检测，护士会先让你测体温和血压，随后才分诊到对应的部门。测量体温期间，三个穿着防护服的医护人员推着一辆病床进来。病床上是一个老头，旁边还陪着一老太太。我第一反应害怕，立马走到角落里，担心老头有肺炎疑似症状。之后护士见状首先处理了这个病号，同样需要先挂号检测。要说如果是快速的走完这个流程，我倒是不会那么害怕。可那老太太口齿不清，还不断干扰正常流程，不愿意挂号检测。尽管一个医护人员看不下去，愿意自掏腰包出钱，老太太还是不愿意检测，坚持认为医院已经或是准备坑她的钱。在他们僵持期间，我还是完成了挂号和检测的流程。再去照CT的路上，偶然从老太太口中听到老头是「北大教数学的教授」。这让我大为震惊。联系之前她说没有就医卡，能不能拿北大的卡替代的情况，我觉得这应该是实话。但是堂堂北大教授的老伴为什么会有这种表现呢？</p><p>4月5号晚上九点多，我回到家中，和家里人开了个视频会议，提出了准备今天辞职，然后回家的想法，得到了家里人的赞同。在疫情发生之前，我是准备5月份离开北京的，后续觉得里我重回学校还有这么久，不如晚点回家，一方面多赚点钱也不亏，另一方面还能把药给打完，因此又改成了7月份回家。可是因为昨晚发烧这件事情，原本对工作内容长期积压的不满一时间涌现出来，让我觉得有借口和亲人及老板说我回家的事情了。我对家里人的说法是我担心北京的防疫，实际上让我真正不想继续干下去的根本原因，还是工作本身。而且我之前因为得去医院，已经请假一周，这次发烧我也不可能直接去公司，也还得请假一到两周，在家工作，与其如此，不如直接离职。</p><p>在写这篇杂谈的时候，已经下午6点了，我还是没能下定决心和老板或者人事提出辞职。准备晚上八点之前做完最终的决定。大概率还是离开了。最让我纠结的，除开打药本身的影响外，还有就是公司的工作，虽然我不喜欢，但是目前人手不够，没人能承接我的工作。我的离开，等于公司对应项目的暂时搁浅。</p><p>不行，还是不纠结了。和人事提出离职吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大概是在1月初的时候，我从隔壁工位的同事听说武汉出现了「不明原因的肺炎」。当时还不以为意，直到1月20日晚，准备回家过年的前一天，新闻上报道有肺炎扩散的趋势，自己这才开始重视起来。于是一向不喜欢戴口罩的我，在21日带着双层口罩出了门，乘地铁至火车站，后乘高铁回家。期间，在地
      
    
    </summary>
    
      <category term="Chitchat" scheme="http://yuukidach.github.io/categories/Chitchat/"/>
    
    
  </entry>
  
  <entry>
    <title>对于未来的困惑</title>
    <link href="http://yuukidach.github.io/2020/02/19/chitchat/%E5%AF%B9%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%9B%B0%E6%83%91/"/>
    <id>http://yuukidach.github.io/2020/02/19/chitchat/对于未来的困惑/</id>
    <published>2020-02-18T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<p>新冠病毒的爆发，让大家都闲在了家里，我也有时间好好整理一下最近的东西，顺带更新一下尘封已久的博客了。</p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>「我为什么要搭建这个博客呢？」</p><p>仔细想想，我好像还从来没说起过这个原因。不过那也已经是很久以前的事情了。</p><p>最直接的原因是在搜索一道UVa OJ题解的时候，翻到了一位名叫<code>Morris</code>的博主的博客。在浏览他博客的过程中，由于自己本身也有希望给自己的成长做个记录的想法，「不如我也自己写一个博客吧！」这样的声音也不断在我脑海中浮现。于是乎，我照着这位博主的方式，也将这个博客搭建了起来。整体风格还是模仿他来的。但是由于自己水平有限，网站的整体技术上还是存在不小的差距。</p><p>刚开始的时候，会频繁的更新这个博客。但随着时间的流逝，凡事三分钟热度的我，还是逐渐断更了，没再打理这个网站。中间偶然捡起来过几次，但最后终归是没再管过了。</p><h2 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h2><p>现在这个时代背景下，大家都在拼了命地读书，本科生遍地走，研究生往往成为了一个工作的起点。作为本科时代学习还不错我的，自然也是抱着「最少也得读个研」的想法了。因为自己的动手能力比较强，做项目、参加比赛往往能得到不错的成绩，加上GPA高，因此我身边的人无一不觉得我是可以保研成功的，我自己也是抱有这种想法的人之一。可是当我得知我恰在保研名单后两位的时候，不想再学习、考试的感觉不断地喷薄而出，我便也没参加考研，直接找了份工作就职了。</p><p>找工作的那段时间，也算是我印象比较清晰的煎熬的时间段了。但是这份难受并不是找工作带来的，而是看着比我菜的人排名在我前面，顺顺利利地保研带来的。「我劝天公重抖擞，不拘一格降人才」这句话虽然说的夸张了，但是这大抵就是我内心最真实的想法了。</p><p>记得大四上的时候，保研已经结束了，学院开始做课程设计，我和两位已经保研的同学一块。其中一人经常问我，另外一人真是什么都不会，上课听不懂，下课代码和报告都得找我要。</p><p><img src="/2020/02/19/chitchat/%E5%AF%B9%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%9B%B0%E6%83%91/对于未来的困惑-1.jpg" alt="你在耍我是吗？在耍我是吧 -- 徒然喜欢你"></p><p>我当时真的很像抓住他们一顿乱锤，然后提到院长面前说他看看保研的都是什么人。但是这又有什么用呢，根据学院的评判标准，综合量化低的我，还是无力改变。既然如此，那就工作吧，工作吧！工作了也就自由了！</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>「工作了也就自由了」这是我内心的想法。我也顺利的拿了一个保底年薪300k，965的offer，这在本科生里边还是不错的。后续又因为表现突出，入职三个月后老板便给涨了一波工资。</p><p>尽管这在大部分人看来，已经安稳了，但是我内心还是充满了痛苦。</p><p>自身学历过低。公司里的同事，除了个别一两个学历一般意外，其余都是学校优于我，或者学历高于我的人。同学聚会的时候，大家也都纷纷出国深造。这让我显得十分难堪。尽管大家会说「你这个已经很好了」，但是以后呢？他们毕业之后是什么样呢？这个大环境下，本科生后续成长是很艰难的吧？</p><p>发展方向无感。我就职的公司，老板喜欢往让我们凡事都研究透彻一点。这一点我是很赞赏的，但是当你研究的事情是你不喜欢的事情时，技术上的深挖反而成为了你生活中最痛苦的一件事。到公司实习的那段时期，因为怎么都解决不掉工作中发现的一个问题，往下挖也无迹可寻，生活一下子就压抑了起来，害怕去公司，害怕面对公司里的同事。以前总觉得电视里，主人公说自己被事情整的头晕头疼，是一件夸大的修辞方式，但是亲身经历过之后，才知道，艺术确实是源于生活。曾一度以为自己要抑郁，吓得父母轮番给我打电话谈心，以至于最后不得不到北京来看望我。现在想起来，那个时候也就已经担心起未来了吧。</p><p>个人成长受限。自己来公司一段时间了，但是提升并不明显。想起来找工作面试的时候，自己关心更多的是待遇问题。犹记的有两段面试，都是在确定给offer之后，一位面试官对我说「第一份工作一定要自己喜欢，这才是最重要的」，另一位则是觉得「你应该去读研的」。但是当时的我都不以为意，现在想想，也需是他们也经历了这样一个时期，才会好意提醒我吧。</p><p><img src="/2020/02/19/chitchat/%E5%AF%B9%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%9B%B0%E6%83%91/对于未来的困惑-2.jpg" alt="我这个人笨，说不清楚 -- 徒然喜欢你"></p><p>有些道理，或许没有经历过，就怎么也弄不懂，总觉得自己和别人不一样，等真正经历了，才会对当初的所作所为追悔莫及。</p><h2 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h2><p>有了前面的经历，自己总算是决定重返校园，申请学校。因为身体上的因素，只申请了HK和新加坡的学校。</p><p>说来也不知道我是幸运还是不幸。若是大三就开始申请，我现在大抵已经在HK读书了。但是19年的动荡，加上现在20年初的新冠病毒，让在HK的内陆学子，基本上都是在上网课了，收效甚微。而我尽管浪费了一年，倒也没有经历19年这一遭。</p><p>目前HK申请的都拿到了offer，新加坡的倒是还没出结果。如果可以的话，最后大概率还是去后者吧。</p><h2 id="担忧"><a href="#担忧" class="headerlink" title="担忧"></a>担忧</h2><p>今年1月份的时候，我重新翻看了<code>Morris</code>的博客，发现他也许久未更新了，6号更新的一篇文章，大抵是和我相似的想法。也不知道他现在如何，工作是否顺心？有没有下定决心回去读书呢？希望他也能顺利吧。</p><p>至于自己，刚开始申请的时候，一直在犹豫申请硕士还是博士，但终究还是无法下定决心直接申请博士。最近浏览网站，看到大家谈论自己博士毕业后的生活，联系起自己的身体，突然又冒出读博的想法了。这样犹豫不觉得我，也不知道改如何是好。想到之前找老师要推荐信的时候，他建议我先读研再决定，我觉得我还是该听取一下别人的意见吧，现在先努力地不去想这件事情。</p><p>另外就是身体因素了，选择离家近的地方，也就是因为这个。目前还不知道去新加坡能否保证自己身体不出问题，还是比较烦的。</p><p>「自己究竟想去做什么呢？自己想成为一个什么样的人呢？」</p><p>这听起来像是给小朋友的问题，但是往往大人也无法搞清楚这个问题的答案啊。我们又有什么资格去问别人呢？</p><p><img src="/2020/02/19/chitchat/%E5%AF%B9%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%9B%B0%E6%83%91/对于未来的困惑-3.jpg" alt="我已经等得够久了，你也该告诉我了吧 -- 徒然喜欢你"></p><p>自己的将来还会继续后悔下去吗？</p><p>我希望是不会的吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新冠病毒的爆发，让大家都闲在了家里，我也有时间好好整理一下最近的东西，顺带更新一下尘封已久的博客了。&lt;/p&gt;
&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;「我为什
      
    
    </summary>
    
      <category term="Chitchat" scheme="http://yuukidach.github.io/categories/Chitchat/"/>
    
    
  </entry>
  
  <entry>
    <title>Convert Image to ASCII Art</title>
    <link href="http://yuukidach.github.io/2020/02/19/practice/image-to-asciiart/"/>
    <id>http://yuukidach.github.io/2020/02/19/practice/image-to-asciiart/</id>
    <published>2020-02-18T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="Image-Processing-Library"><a href="#Image-Processing-Library" class="headerlink" title="Image Processing Library"></a>Image Processing Library</h3><p>To process a image, the easiest way is using a open source library.</p><p>Since this project is written for others. They are not familiar with the image processing and it’s to hard for them to install OpenCV in their computer. So, I tried to find a light-weight image processing processing library called <a href="https://cimg.eu/">CImg</a>.</p><p>To use this repo, we just need to put the header file <code>CImg.h</code> into our own project folder and include it in the program.</p><p><strong>NOTE: The <code>CImg</code> library can only deal with bmp file. In my project we need to deal with a jpg image, so we need to download ImageMagick in our computer to convert the jpg image into bmp image</strong></p><h3 id="Conversion-Principle"><a href="#Conversion-Principle" class="headerlink" title="Conversion Principle"></a>Conversion Principle</h3><p>Because we will use ASCII code to represent the image, and the ASCII code only has one color, we only need to process a gray image. So the conversion steps become very simple:</p><ol><li>If the image is not gray, convert it to gray image</li><li>Crop the image to the desired size (usually smaller than its original size)</li><li>Define a string <code>S</code> which contains different ASCII code.(And its length <code>l</code> is better to be short)</li><li>Convert the pixel value to a number <code>res</code> not bigger than <code>l</code></li><li>Subsitude the pixels with <code>S[res]</code></li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> cimg_display</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cimg_display 0              <span class="comment">// no need to show image</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CImg.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cimg_library;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *ASCII_LIST = <span class="string">&quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\&quot;^`&#x27;. &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">CImg&lt;&gt; <span class="title">rgb2gray</span><span class="params">(CImg&lt;&gt; color_img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// create a gray image</span></span><br><span class="line">    <span class="function">CImg&lt;&gt; <span class="title">gray_img</span><span class="params">(color_img.width(), color_img.height(), <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for all pixels x,y in image</span></span><br><span class="line">    cimg_forXY(color_img, x, y) &#123;</span><br><span class="line">        <span class="comment">// separation of channels</span></span><br><span class="line">        <span class="keyword">int</span> R = (<span class="keyword">int</span>) color_img(x, y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> G = (<span class="keyword">int</span>) color_img(x, y, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> B = (<span class="keyword">int</span>) color_img(x, y, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calculate gray value</span></span><br><span class="line">        <span class="comment">// (x, y) -&gt; val_a,   (x, y) -&gt; a, b, c</span></span><br><span class="line">        <span class="keyword">int</span> gray_val = (<span class="keyword">int</span>) (<span class="number">0.299</span> * R + <span class="number">0.587</span> * G + <span class="number">0.114</span> * B);</span><br><span class="line">        gray_img(x, y, <span class="number">0</span>, <span class="number">0</span>) = gray_val;</span><br><span class="line">    &#125;</span><br><span class="line">    gray_img.normalize(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">return</span> gray_img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The input must be gray image. If not, use &#x27;rgb2gray&#x27;</span></span><br><span class="line"><span class="comment"> * to do a shift.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * gray_img: gray image</span></span><br><span class="line"><span class="comment"> * file_name: output file name</span></span><br><span class="line"><span class="comment"> * w: weight</span></span><br><span class="line"><span class="comment"> * h: height</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_gray2ascii</span><span class="params">(CImg&lt;&gt; gray_img, <span class="keyword">const</span> <span class="keyword">char</span>* file_name, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// output to out.txt</span></span><br><span class="line">    <span class="function">ofstream <span class="title">out</span><span class="params">(file_name)</span></span>;</span><br><span class="line"></span><br><span class="line">    gray_img.resize(w, h);</span><br><span class="line"></span><br><span class="line">    cimg_forY(gray_img,y) &#123;</span><br><span class="line">        cimg_forX(gray_img,x) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = gray_img(x, y, <span class="number">0</span>, <span class="number">0</span>) / <span class="keyword">sizeof</span>(ASCII_LIST);</span><br><span class="line">            out &lt;&lt; ASCII_LIST[val];</span><br><span class="line">        &#125;</span><br><span class="line">        out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cimg::imagemagick_path(<span class="string">&quot;D:\\\\\&quot;Program Files\&quot;\\ImageMagick-7.0.9-Q16\\magick.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Init images</span></span><br><span class="line">    <span class="function">CImg&lt;&gt; <span class="title">img</span><span class="params">(<span class="string">&quot;test.jpg&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    img = rgb2gray(img);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *file_name = <span class="string">&quot;out.txt&quot;</span>;</span><br><span class="line">    print_gray2ascii(img, file_name, <span class="number">200</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;h3 id=&quot;Image-Processing-Library&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Image Processing" scheme="http://yuukidach.github.io/categories/Image-Processing/"/>
    
      <category term="C/C++" scheme="http://yuukidach.github.io/categories/Image-Processing/C-C/"/>
    
    
      <category term="C++" scheme="http://yuukidach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Shuffling Bits</title>
    <link href="http://yuukidach.github.io/2019/08/12/Shuffling-Bits/"/>
    <id>http://yuukidach.github.io/2019/08/12/Shuffling-Bits/</id>
    <published>2019-08-12T01:44:44.000Z</published>
    <updated>2020-11-03T07:58:57.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p><strong>NOTE:</strong> This article is from chapter 7.2 in <em>Hackers’ Delight</em>. I write this post because:</p><ol><li>To have a better understanding of the algorithm</li><li>Need to apply it in a similar situation</li></ol><p>Resources sometimes can be scarce in MCU. We may tend to use as little resources as possible and do calculations as fast as we could when the performance of MCU just barely meets our demands.</p><p>Besides when talking about calculations in MCU, many people would think about bit operation. For example, in normal C program, we will write:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">8</span> / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>However, for program running in MCU, people usually write:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int32_t</span> a = <span class="number">8</span> &gt;&gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>Because the bit operation is faster than arithmetic operation in most situations.</p><p>Now cames the problem:</p><p><strong>How can we shuffle bits efficiently?</strong></p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Suppose we need to shuffle a 32-bit word:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcd efgh ijkl mnop ABCD EFGH IJKL MNOP</span><br></pre></td></tr></table></figure><p>into</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aAbB cCdD eEfF gGhH iIjJ kKlL mMnN oOpP</span><br></pre></td></tr></table></figure><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>To solve to problem, we can do shuffles like:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abcd efgh ijkl mnop ABCD EFGH IJKL MNOP</span><br><span class="line">abcd efgh ABCD EFGH ijkl mnop IJKL MNOP</span><br><span class="line">abcd ABCD efgh EFGH ijkl IJKL mnop MNOP</span><br><span class="line">abAB cdCD efEF ghGH ijIJ klKL mnMN opOP</span><br><span class="line">aAbB cCdD eEfF gGhH iIjJ kKlL mMnN oOpP</span><br></pre></td></tr></table></figure><p>These operations can be done with basic RISC instructions in <code>log2(w/2)</code> steps. <code>w</code> is the how many bits the word has. In this example, <code>w = 32</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = (x &amp; <span class="number">0x0000ff00</span>) &lt;&lt; <span class="number">8</span> | (x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x0000ff00</span> | x &amp; <span class="number">0xff0000ff</span>;</span><br><span class="line">x = (x &amp; <span class="number">0x00f000f0</span>) &lt;&lt; <span class="number">4</span> | (x &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x00f000f0</span> | x &amp; <span class="number">0xf00ff00f</span>;</span><br><span class="line">x = (x &amp; <span class="number">0x0c0c0c0c</span>) &lt;&lt; <span class="number">2</span> | (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x0c0c0c0c</span> | x &amp; <span class="number">0xc3c3c3c3</span>;</span><br><span class="line">x = (x &amp; <span class="number">0x22222222</span>) &lt;&lt; <span class="number">1</span> | (x &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x22222222</span> | x &amp; <span class="number">9999999999</span>;</span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>The code above seems quit efficient. But let’s think about how to exchange 2 variables value with <code>XOR</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><p>You see, by using <code>XOR</code>，the exchange becomes much more easier, can we apply the similar mathod to the code above?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (x ^ (x &gt;&gt; <span class="number">8</span>)) &amp; <span class="number">0x0000ff00</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">8</span>);</span><br><span class="line">t = (x ^ (x &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x00f000f0</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">4</span>);</span><br><span class="line">t = (x ^ (x &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0x0c0c0c0c</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">2</span>);</span><br><span class="line">t = (x ^ (x &gt;&gt; <span class="number">1</span>)) &amp; <span class="number">0x22222222</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Here is an interesting trick: To unshuffle the word, we could simply perform the swaps in reverse order</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (x ^ (x &gt;&gt; <span class="number">1</span>)) &amp; <span class="number">0x22222222</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">1</span>);</span><br><span class="line">t = (x ^ (x &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0x0c0c0c0c</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">2</span>);</span><br><span class="line">t = (x ^ (x &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x00f000f0</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">4</span>);</span><br><span class="line">t = (x ^ (x &gt;&gt; <span class="number">8</span>)) &amp; <span class="number">0x0000ff00</span>; x = x ^ t ^ (t &lt;&lt; <span class="number">8</span>);</span><br></pre></td></tr></table></figure><h2 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h2><p>Here comes another question:</p><p>Shuffle</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 ABCD EFGH IJKL MNOP</span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0A0B 0C0D 0E0F 0G0H 0I0J 0K0L 0M0N 0O0P</span><br></pre></td></tr></table></figure><p>With the knowledge above, this becames easy to do:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = ((x &amp; <span class="number">0xff00</span>) &lt;&lt; <span class="number">8</span>) | (x &amp; <span class="number">0x00ff</span>);</span><br><span class="line">x = ((x &lt;&lt; <span class="number">4</span>) | x) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">x = ((x &lt;&lt; <span class="number">2</span>) | x) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">x = ((x &lt;&lt; <span class="number">1</span>) | x) &amp; <span class="number">0x55555555</span>;</span><br></pre></td></tr></table></figure><p>To unshuffle</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = x &amp; <span class="number">0x55555555</span>;</span><br><span class="line">x = ((x &gt;&gt; <span class="number">1</span>) | x) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">x = ((x &gt;&gt; <span class="number">2</span>) | x) &amp; <span class="number">0x0F0F0F0F</span>;</span><br><span class="line">x = ((x &gt;&gt; <span class="number">4</span>) | x) &amp; <span class="number">0x00FF00FF</span>;</span><br><span class="line">x = ((x &gt;&gt; <span class="number">8</span>) | x) &amp; <span class="number">0x0000FFFF</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This article is
      
    
    </summary>
    
      <category term="Programming Exercises" scheme="http://yuukidach.github.io/categories/Programming-Exercises/"/>
    
      <category term="Algorithm" scheme="http://yuukidach.github.io/categories/Programming-Exercises/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://yuukidach.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Makefile for Projects with Subdirectories</title>
    <link href="http://yuukidach.github.io/2019/08/05/makefile-learning/"/>
    <id>http://yuukidach.github.io/2019/08/05/makefile-learning/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>In order to manage our project easily, we may tend to <code>make</code> for help. Usually, our projects will contians many subdirectories. So writing a makefile which can always compile our projects successfully when our project add, delete or modify some sub-dirs is quite important.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Take my private projects <code>kmusb</code> for example.</p><p>It file structure is like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── arg_parser</span><br><span class="line">│   ├── arg_parser.c</span><br><span class="line">│   └── arg_parser.h</span><br><span class="line">├── bin</span><br><span class="line">├── data</span><br><span class="line">├── kmusb.c</span><br><span class="line">├── kmusb.h</span><br><span class="line">├── makefile</span><br><span class="line">├── obj</span><br><span class="line">├── semihost</span><br><span class="line">│   ├── usb_semihost.c</span><br><span class="line">│   └── usb_semihost.h</span><br><span class="line">├── virtual_com.c</span><br><span class="line">└── virtual_com.h</span><br></pre></td></tr></table></figure><p>I know the structure is awful. But let’s forget about it first, since our final goal is to write a universal makefile that can compile our project, no matter what file structure they have.</p><p>For the above project:  </p><ul><li><code>main</code> function is contianed in <code>kmsub.c</code></li><li><code>arg_parser/</code>, <code>semihost/</code>are 2 directories that we write our code in them</li><li><code>bin/</code> contains the output file</li><li><code>obj/</code> contains all <code>*.obj</code> files and list them just like <code>*.c</code> files in the project.</li><li><code>data/</code> is a folder that we store the data created when the program is running</li></ul><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><h3 id="Practice-1-Write-All-Targets-Directly"><a href="#Practice-1-Write-All-Targets-Directly" class="headerlink" title="Practice 1 - Write All Targets Directly"></a>Practice 1 - Write All Targets Directly</h3><p>To write a most simple makefile, we can code like:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">TARGET = kmusb</span><br><span class="line"></span><br><span class="line">OUTDIR = ./bin</span><br><span class="line">DATADIR = ./data</span><br><span class="line">DIR_INC = ./semihost</span><br><span class="line">DIR_OBJ = ./obj</span><br><span class="line"></span><br><span class="line">CC = gcc</span><br><span class="line"></span><br><span class="line">objects = kmusb.o usb_5411x.o</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: clean <span class="variable">$(objects)</span></span><br><span class="line">    <span class="variable">$(CC)</span> -o <span class="variable">$(OUTDIR)</span>/<span class="variable">$(TARGET)</span> <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="section">kmusb.o: kmusb.c ./semihost/usb_semihost.h ./arg_parser/arg_parser.h</span></span><br><span class="line">    <span class="variable">$(CC)</span> -I./semihost -I./arg_paser -c kmusb.c</span><br><span class="line"></span><br><span class="line"><span class="section">virtual_com.o: virtual_com.c virutual_com.h</span></span><br><span class="line">    <span class="variable">$(CC)</span> -c virtual_com.c</span><br><span class="line"></span><br><span class="line"><span class="section">arg_parser.o: ./arg_parser/arg_parser.c ./arg_parser/arg_parser.h</span></span><br><span class="line">    <span class="variable">$(CC)</span> -c ./arg_parser/arg_parser.c</span><br><span class="line"></span><br><span class="line"><span class="section">usb_semihost.o: ./semihost/usb_semihost.c ./semihost/usb_semihost.h</span></span><br><span class="line">    <span class="variable">$(CC)</span> -c ./semihost/usb_semihost.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -rf <span class="variable">$(OUTDIR)</span>/* <span class="variable">$(DATADIR)</span>/* *.o</span><br></pre></td></tr></table></figure><p>We write all the targets directly.</p><blockquote><p><code>.PHONY</code>: A phony target is one that is not really the name of a file; rather it is just a name for a recipe to be executed when you make an explicit request.  </p><p>There are two reasons to use a phony target: to avoid a conflict with a file of the same name, and to improve performance. <a href="#references">[1]</a></p></blockquote><h3 id="Pracetice-2-Use-variables"><a href="#Pracetice-2-Use-variables" class="headerlink" title="Pracetice 2 - Use variables"></a>Pracetice 2 - Use variables</h3><p>It’s unconvinient to write all the target directly. If we modify our project later, we need to change a lot in the makefile. Just like the variable <code>CC</code>, we can also define varibles to store the subfolders.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">TARGET = kmusb</span><br><span class="line"></span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -g</span><br><span class="line"></span><br><span class="line">OUTDIR = ./bin</span><br><span class="line">DATADIR = ./data</span><br><span class="line">SUBDIR = semihost stream arg_parser</span><br><span class="line">DIR_OBJ = ./obj</span><br><span class="line"></span><br><span class="line">INCS = <span class="variable">$(<span class="built_in">wildcard</span> *.h $(<span class="built_in">foreach</span> fd, <span class="variable">$(SUBDIR)</span>, <span class="variable">$(fd)</span>/*.h)</span>)</span><br><span class="line">SRCS = <span class="variable">$(<span class="built_in">wildcard</span> *.c $(<span class="built_in">foreach</span> fd, <span class="variable">$(SUBDIR)</span>, <span class="variable">$(fd)</span>/*.c)</span>)</span><br><span class="line">NODIR_SRC = <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$(SRCS)</span>)</span></span><br><span class="line">OBJS = <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(DIR_OBJ)</span>/, $(SRCS:c=o)</span>) <span class="comment"># obj/xxx.o obj/folder/xxx .o</span></span><br><span class="line">INC_DIRS = <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(SUBDIR)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean echoes</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(CC)</span> -o <span class="variable">$(OUTDIR)</span>/<span class="variable">$@</span> <span class="variable">$(OBJS)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(DIR_OBJ)</span>/%.o: %.c <span class="variable">$(INCS)</span></span><br><span class="line">    mkdir -p $(@D)</span><br><span class="line">    <span class="variable">$(CC)</span> -o <span class="variable">$@</span> -c <span class="variable">$&lt;</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(INC_DIRS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -rf <span class="variable">$(OUTDIR)</span>/* <span class="variable">$(DATADIR)</span>/* <span class="variable">$(DIR_OBJ)</span>/*</span><br><span class="line"></span><br><span class="line"><span class="section">echoes:</span></span><br><span class="line">    @echo <span class="string">&quot;INC files: <span class="variable">$(INCS)</span>&quot;</span>  </span><br><span class="line">    @echo <span class="string">&quot;SRC files: <span class="variable">$(SRCS)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;OBJ files: <span class="variable">$(OBJS)</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>foreach</code>: It causes one piece of text to be used repeatedly, each time with a different substitution performed on it. It resembles the for command in the shell sh and the foreach command in the C-shell csh.<a href="#references">[2]</a>  </p><ul><li>Systax: <code>$(foreach var,list,text)</code>  </li></ul><p><code>$(@D)</code>: <em>automatic variables.</em> The directory part of the file name of the target, with the trailing slash removed. If the value of <code>$@</code> is <code>dir/foo.o</code> then <code>$(@D)</code> is <code>dir</code>. This value is <code>.</code> if <code>$@</code> does not contain a slash.</p></blockquote><p>Here we add a variable <code>SUBDIR</code> and add our subfolders in it. Then we can use <code>make</code> syntax like <code>wildcard</code>, <code>foreach</code>and so on to get all <code>*.c</code> and <code>*.h</code> file in the project. As for the <code>obj/</code> folder, to better maintain all the <code>*.obj</code>, we will create folders with the same name as the subfolders in the projects under <code>obj/</code>.</p><p>Besides, we add a target <code>echoes</code> to help us debug our makefile.</p><p>Now, our makefile can compile the projects with subfolders easily. Just change the contents in <code>SUBDIR</code>.</p><h3 id="Practice-3-Complete-the-makefile"><a href="#Practice-3-Complete-the-makefile" class="headerlink" title="Practice 3 - Complete the makefile"></a>Practice 3 - Complete the makefile</h3><p>From above actions, we wrote a makefile that can adapt to various of projects. This part just some small modification to make our makefile better to look.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">TARGET = kmusb</span><br><span class="line"></span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -g</span><br><span class="line"></span><br><span class="line">OUTDIR = ./bin</span><br><span class="line">DATADIR = ./data</span><br><span class="line">SUBDIR = semihost stream arg_parser</span><br><span class="line">DIR_OBJ = ./obj</span><br><span class="line"></span><br><span class="line">INCS = <span class="variable">$(<span class="built_in">wildcard</span> *.h $(<span class="built_in">foreach</span> fd, <span class="variable">$(SUBDIR)</span>, <span class="variable">$(fd)</span>/*.h)</span>)</span><br><span class="line">SRCS = <span class="variable">$(<span class="built_in">wildcard</span> *.c $(<span class="built_in">foreach</span> fd, <span class="variable">$(SUBDIR)</span>, <span class="variable">$(fd)</span>/*.c)</span>)</span><br><span class="line">NODIR_SRC = <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$(SRCS)</span>)</span></span><br><span class="line">OBJS = <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(DIR_OBJ)</span>/, $(SRCS:c=o)</span>) <span class="comment"># obj/xxx.o obj/folder/xxx .o</span></span><br><span class="line">INC_DIRS = -I./ <span class="variable">$(<span class="built_in">addprefix</span> -I, <span class="variable">$(SUBDIR)</span>)</span></span><br><span class="line">LIBS = -largp</span><br><span class="line">LIB_DIRS = -L/usr/local/Cellar/argp-standalone/1.3/lib</span><br><span class="line"></span><br><span class="line">PHONY := <span class="variable">$(TARGET)</span></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(CC)</span> -o <span class="variable">$(OUTDIR)</span>/<span class="variable">$@</span> <span class="variable">$(OBJS)</span> <span class="variable">$(LIB_DIRS)</span> <span class="variable">$(LIBS)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(DIR_OBJ)</span>/%.o: %.c <span class="variable">$(INCS)</span></span><br><span class="line">    mkdir -p $(@D)</span><br><span class="line">    <span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> <span class="variable">$(INC_DIRS)</span></span><br><span class="line"></span><br><span class="line">PHONY += clean</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -rf <span class="variable">$(OUTDIR)</span>/* <span class="variable">$(DATADIR)</span>/* <span class="variable">$(DIR_OBJ)</span>/*</span><br><span class="line"></span><br><span class="line">PHONY += echoes</span><br><span class="line"><span class="section">echoes:</span></span><br><span class="line">    @echo <span class="string">&quot;INC files: <span class="variable">$(INCS)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;SRC files: <span class="variable">$(SRCS)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;OBJ files: <span class="variable">$(OBJS)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;LIB files: <span class="variable">$(LIBS)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;INC DIR: <span class="variable">$(INC_DIRS)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;LIB DIR: <span class="variable">$(LIB_DIRS)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">.PHONY = <span class="variable">$(PHONY)</span></span><br></pre></td></tr></table></figure><p>Let’s leave alone the include library I added, since our main goal is to write a makefile to complie projects with subfolders. This makefile is copied from my projects.</p><p>You see, I adjust the way to write <code>.PHONY</code>.</p><p>This is a trick that I got from <a href="https://github.com/mirror/busybox">busybox</a>. We add contents to the <code>.PHONY</code> wehen we write a new target is easier to maintain the makefile when it grows bigger and bigger.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html">Phony Targets</a></li><li><a href="https://www.gnu.org/software/make/manual/html_node/Foreach-Function.html">The foreach Function</a></li><li><a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">Automatic Variables</a></li><li><a href="https://github.com/mirror/busybox">busybox GitHub repo</a></li><li><a href="http://ismail.badawi.io/blog/2017/03/28/automatic-directory-creation-in-make/">Automatic Directory Creation in Make</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;In order to manage our project easily, we may 
      
    
    </summary>
    
      <category term="Makefile" scheme="http://yuukidach.github.io/categories/Makefile/"/>
    
    
      <category term="C" scheme="http://yuukidach.github.io/tags/C/"/>
    
      <category term="Makefile" scheme="http://yuukidach.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>LPC55S69 USB 高速模式测试（一）</title>
    <link href="http://yuukidach.github.io/2019/05/23/LPC55S69-USB-test/"/>
    <id>http://yuukidach.github.io/2019/05/23/LPC55S69-USB-test/</id>
    <published>2019-05-22T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h1><p>配置LPC55S69 EVK所带的高速USB作为功能设备，测试其最快速率能达到多少，用于验证后续的开发。</p><h1 id="LPC55S69配置"><a href="#LPC55S69配置" class="headerlink" title="LPC55S69配置"></a>LPC55S69配置</h1><p>LPC55S69是一款基于ARM内核的双核MCU， 由两个Cortex-M33构成。其最高运行频率为100MHz。</p><p><img src="/2019/05/23/LPC55S69-USB-test/lpc55s69_overview.jpg" alt="LPC55S69 EVK">  </p><p>整个工程的准备工作如下：</p><ol><li>选用CPU0作为默认的控制核心</li><li>配置MAIN_CLK为96MHz（为了使用高速USB口，CPU时钟频率不得低于60MHz）</li><li>给USB HS PHY上电</li><li>USB功能设备配置<ul><li>配置功能设备，需要先使能host controller的时钟，以便进行USB配置</li><li>DEV_ENABLE置1，让一个端口表现为USB设备</li><li>清除USB1_HOST位，关闭host controller，降低能耗</li></ul></li><li>USB时钟配置<ul><li>USB PHY配置48MHz时钟</li><li>USB PHY以及对应SRAM时钟使能</li></ul></li></ol><h1 id="传输测试"><a href="#传输测试" class="headerlink" title="传输测试"></a>传输测试</h1><p>连接方式：LPC55S69 EVK &lt;———-USB 2.0 HS ————&gt; MacBook</p><p>Corex-M33 freq: 100MHz</p><p>使用官方提供的SKD（v2.5.1），利用块传输（bulk transfer）。循环发送<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (1) &#123;</span><br><span class="line">    USB_DeviceCdcAcmSend(s_cdcVcom.cdcAcmHandle, USB_CDC_VCOM_BULK_IN_ENDPOINT, tmp_buf, buf_len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>tmp_buf为buffer地址，buf_len是需要传送的数据长度</p><p>使用上述方式发送数据，buf_len越长，发送USB发送速率越快，最快能到8MB/s左右，无传输错误发生。</p><p>8MB/s的速率对于HS USB来说是明显偏低的。通过调整整个工程的优化等级，可以提高速率。将优化等级调整至-O1或者以上，USB的速率可以达到21MB/s，无传输错误发生。</p><p><img src="/2019/05/23/LPC55S69-USB-test/SDK_test.png" alt="测试结果"></p><p>此外，如果MCU的时钟频率降低，USB的传输速率也会相应降低，通过USB分析仪观察后，可以发现是NAK的数量变多。</p><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><p>虽然最后通过增长buf_len，以及调整优化等级，可以使得高速USB口的速率在21MB/s左右。但是对于最高速率480Mbps的Hi-Speed USB来说，速率上还是有所欠缺。</p><p>采用USB分析仪进行抓包分析<br><img src="/2019/05/23/LPC55S69-USB-test/packet1.png" alt="抓包分析"></p><p>可以发现在进行数据传输的时候，USB发送了过多的NAK。测试中的USB传输，其发送NAK与发送有效数据的时间基本相同，可以做如下简单计算：  </p><p>由于一次有效的数据传输不光包含了数据本身，还包含了令牌包和握手包，因此有效数据在一次事务传输中的占比可以考虑为512/518。计算480Mbps下的理论传输速率为  </p><center>480 / 8 / 2 / 518 * 512 = 29.6525 MB/s</center><p>考虑到实际的损耗，21MB/s看起来就是一个可以接受的数据了。</p><p>值得注意的是，由于MCU的时钟频率降低，NAK的数量会变多。而NAK的数量变多不外乎两种原因：</p><ul><li>USB device没有数据需要发送</li><li>USB device正忙，无法相应host的请求</li></ul><p>MCU的时钟频率降低会导致NAK增多，也就说尽管整个测试工程只执行了USB搬运，但是MCU还是有大量的操作需要处理。结合优化后的USB速率会变高这一情况来看，USB工作在21MB/s的速率，极有可能是MCU的数据搬运不及时，没有搬运到USB发送数据的缓存当中。</p><p>可以从软件上考虑对USB速率的优化。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>LPCXpresso55S69 Development Board (Rev. 1.2 — 25 April 2019)</li><li>LPC55S6x User manual (Rev. 1.2 — 3 May 2019)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;测试目标&quot;&gt;&lt;a href=&quot;#测试目标&quot; class=&quot;headerlink&quot; title=&quot;测试目标&quot;&gt;&lt;/a&gt;测试目标&lt;/h1&gt;&lt;p&gt;配置LPC55S69 EVK所带的高速USB作为功能设备，测试其最快速率能达到多少，用于验证后续的开发。&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
      <category term="MCU" scheme="http://yuukidach.github.io/categories/MCU/"/>
    
      <category term="USB" scheme="http://yuukidach.github.io/categories/MCU/USB/"/>
    
    
      <category term="USB" scheme="http://yuukidach.github.io/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>Ucount 完结之后</title>
    <link href="http://yuukidach.github.io/2017/03/27/Ucount%20%E5%AE%8C%E7%BB%93%E4%B9%8B%E5%90%8E/"/>
    <id>http://yuukidach.github.io/2017/03/27/Ucount 完结之后/</id>
    <published>2017-03-26T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.973Z</updated>
    
    <content type="html"><![CDATA[<p>很久没更新博客了。从最开始饶有兴致地搭建，到现在，愈发地发现自己能说的东西变得少了，以至于都将近荒废了这个地方。</p><p>不是说自己变得慵懒，而是近来常常有种感觉，觉得自身的知识储备太匮乏了。与其用无意义地更新博客来达到一种自我满足的状态，倒不如静下心来好好的提升自我，做点有意义的事情。</p><p>写一个自己的记账软件Ucount是出于对现有记账软件各种冗余功能和广告的不满。本来寒假的时候，就应该完成记编写。但是由于自己的资料准备问题，一直到了开学都已经过去一段时间了，才真正开始着手。</p><p>最基本的功能编写了两三天的样子，后来花了十多天一直优化到现在，已经将所有的基础功能都更新完毕，也算是把自己定下的诺言给实现了。</p><p>接下来也就不会再去深究安卓了，毕竟这不是自己想要坚持的方向。要赶紧回到正轨才行，OJ的练习，Linux的学习还是要继续下去的。</p><p>稍微写了一点文字，虽然条理十分还乱，但也算是对自己完成一个目标之后的记录吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久没更新博客了。从最开始饶有兴致地搭建，到现在，愈发地发现自己能说的东西变得少了，以至于都将近荒废了这个地方。&lt;/p&gt;
&lt;p&gt;不是说自己变得慵懒，而是近来常常有种感觉，觉得自身的知识储备太匮乏了。与其用无意义地更新博客来达到一种自我满足的状态，倒不如静下心来好好的提升自我
      
    
    </summary>
    
      <category term="Chitchat" scheme="http://yuukidach.github.io/categories/Chitchat/"/>
    
    
  </entry>
  
  <entry>
    <title>字幕文件批量重命名脚本（二） —— Linux</title>
    <link href="http://yuukidach.github.io/2017/02/12/%E5%AD%97%E5%B9%95%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yuukidach.github.io/2017/02/12/字幕文件批量重命名（二）/</id>
    <published>2017-02-11T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<p>还是老样子，先上GitHub：<a href="https://github.com/yuukidach/Shell_Scripts">Yuuki_Dach’s GitHub</a></p><p>上次自己写了一个字幕批量重命名的脚本，结果发现在处理字幕文件的时候还是存在bug（毕竟是自己一边看番，一边测试+改进，没有特意的去找测试样本）</p><p><img src="http://7xread.com1.z0.glb.clouddn.com/0baf27c3-45af-43fd-8e81-0b92a2858963" alt="男子高中生的日常 - 好..好尴尬"></p><p>首先是关于视频文件的查找，原来的查找方式十分简单，也没有使用正则表达式，只是粗略的查找了一下，这里利用find的功能，使得查找更加精确。</p><p>在处理字幕文件的时候，也有问题。for循环在利用find查找的时候，会把空格视为一个间断。因此，这里利用IFS，把find指令找到的文件名当作一整块来处理就行了。</p><p>另外，字幕文件的后缀名有多种，而且利用正则表达式来匹配的方式也有很多，这里就留到下次再来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">echo &quot;Before the opration stars, please make sure you have been in the right folder!&quot;</span><br><span class="line">while true; do</span><br><span class="line">    read -p &quot;Do you want to continue? y&#x2F;n  &quot; yn</span><br><span class="line">    case $&#123;yn&#125; in</span><br><span class="line">        [Yy]* ) break;;</span><br><span class="line">        [Nn]* ) exit;;</span><br><span class="line">        * ) echo &quot;Please answer yes or no.&quot;;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;What is the videos&#39; extension name?&quot;</span><br><span class="line">read video_extension_name</span><br><span class="line"></span><br><span class="line">echo &quot;How many episodes does it have?&quot;</span><br><span class="line">read total_video_episode_num</span><br><span class="line"></span><br><span class="line">echo &quot;These files were renamed successfully:&quot;</span><br><span class="line">for target_episode in &#96;seq -w 1 $&#123;total_video_episode_num&#125;&#96; </span><br><span class="line">do</span><br><span class="line">    target_video&#x3D;&#96;find -regex &quot;.*[^0-9]?$&#123;target_episode&#125;[^0-9]?.*$&#123;video_extension_name&#125;&quot;&#96;</span><br><span class="line">    target_video&#x3D;$&#123;target_video%$&#123;video_extension_name&#125;&#125;</span><br><span class="line">    target_video&#x3D;$&#123;target_video:2&#125;</span><br><span class="line">    echo &quot;$&#123;target_video&#125;&quot;</span><br><span class="line">    find -regex &quot;.*[^0-9\.i]$&#123;target_episode&#125;[^0-9\.P].*ass&quot; | while IFS&#x3D;&quot; &quot; read target_sub</span><br><span class="line">    do</span><br><span class="line">        echo &quot;$&#123;target_sub&#125;&quot;</span><br><span class="line">        rename &quot;s&#x2F;.*[^0-9\.i]$&#123;target_episode&#125;[^0-9\.P].*\.&#x2F;$&#123;target_video&#125;&#x2F;&quot; &quot;$&#123;target_sub&#125;&quot;</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还是老样子，先上GitHub：&lt;a href=&quot;https://github.com/yuukidach/Shell_Scripts&quot;&gt;Yuuki_Dach’s GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上次自己写了一个字幕批量重命名的脚本，结果发现在处理字幕文件的时候还是存在b
      
    
    </summary>
    
      <category term="编程学习" scheme="http://yuukidach.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Ubuntu" scheme="http://yuukidach.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yuukidach.github.io/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://yuukidach.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yuukidach.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>字幕文件批量重命名脚本 —— Linux</title>
    <link href="http://yuukidach.github.io/2017/02/05/%E5%AD%97%E5%B9%95%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/"/>
    <id>http://yuukidach.github.io/2017/02/05/字幕文件批量重命名/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<p>现在更新博客的速度大大降低了，主要还是认为把自己做的题目传上来对别人和自己的帮助都不是很大。行，废话少说，我们切入正题吧。</p><p>刚刚闲来无事，想到之前看番的时候，有些另外下载的字幕会和视频名字不匹配，给观看带来不必要的麻烦，所以动手写了一个比较粗糙的字幕文件批量重命名的脚本。</p><p>代码已经上传到<a href="https://github.com/yuukidach/Shell_Scripts">Yuuki_Dach’s GitHub</a>，后续还会慢慢添加别的脚本。</p><p>其实代码并不复杂，就是先确定文件路径，然后手动输入视频文件后缀名和集数，然后开始运行就行了，这里还是把代码也贴一下，方便大家吧<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Before the opration stars, please make sure you have been in the right folder!&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Do you want to continue? y/n&quot;</span> yn</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$&#123;yn&#125;</span> <span class="keyword">in</span></span><br><span class="line">        [Yy]* ) <span class="built_in">break</span>;;</span><br><span class="line">        [Nn]* ) <span class="built_in">exit</span>;;</span><br><span class="line">        * ) <span class="built_in">echo</span> <span class="string">&quot;Please answer yes or no.&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;What is the videos&#x27; extension name?&quot;</span></span><br><span class="line"><span class="built_in">read</span> video_extension_name</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;How many episodes does it have?&quot;</span></span><br><span class="line"><span class="built_in">read</span> total_video_episode_num</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;These files were renamed successfully:&quot;</span></span><br><span class="line"><span class="keyword">for</span> target_episode <span class="keyword">in</span> `seq -w 1 <span class="variable">$&#123;total_video_episode_num&#125;</span>` </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    target_video=(*[^0-9]<span class="variable">$&#123;target_episode&#125;</span>[^0-9]*<span class="variable">$&#123;video_extension_name&#125;</span>)</span><br><span class="line">    target_video=<span class="variable">$&#123;target_video%<span class="variable">$&#123;video_extension_name&#125;</span>&#125;</span></span><br><span class="line">    <span class="keyword">for</span> target_srt <span class="keyword">in</span> `find -regex <span class="string">&quot;.*[^0-9]?<span class="variable">$&#123;target_episode&#125;</span>[^0-9]?.*srt&quot;</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;target_srt&#125;</span></span><br><span class="line">        rename <span class="string">&quot;s/.*[^0-9]?<span class="variable">$&#123;target_episode&#125;</span>[^0-9]?.*?\./<span class="variable">$&#123;target_video&#125;</span>/&quot;</span> <span class="variable">$&#123;target_srt&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在更新博客的速度大大降低了，主要还是认为把自己做的题目传上来对别人和自己的帮助都不是很大。行，废话少说，我们切入正题吧。&lt;/p&gt;
&lt;p&gt;刚刚闲来无事，想到之前看番的时候，有些另外下载的字幕会和视频名字不匹配，给观看带来不必要的麻烦，所以动手写了一个比较粗糙的字幕文件批量重
      
    
    </summary>
    
      <category term="编程学习" scheme="http://yuukidach.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Ubuntu" scheme="http://yuukidach.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yuukidach.github.io/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://yuukidach.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yuukidach.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>驭远路上——STM32比赛作品的记录</title>
    <link href="http://yuukidach.github.io/2017/01/05/%E9%A9%AD%E8%BF%9C%E8%B7%AF%E4%B8%8A/"/>
    <id>http://yuukidach.github.io/2017/01/05/驭远路上/</id>
    <published>2017-01-04T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<p>从开始准备学校“驭远杯”比赛，到现在比赛结束，自己和自己的队伍以初赛和决赛都是第一名的成绩成功夺冠，不知不觉已经过去一段时间了。这段时间里，没有和往常一样定期的刷OJ，也少了一定的闲暇时光。基本每天都是在白天上课和写作业，晚上准备比赛这样的节奏中度过。物理实验什么的都停了好久，差点选不够了_(:зゝ∠)_</p><p><img src="http://7xread.com1.z0.glb.clouddn.com/de0c3fa5-49e5-44b4-8bf0-e496681384bc" alt="Shirobako"></p><p>虽然忙碌，但是最后的结果还是很不错的，也证明了我们这么多天的辛苦没有白费吧。这里还是简单记录一下自己的参赛过程。</p><p>先附上自己的代码: <a href="https://github.com/yuukidach/Remote-Control-Car">Controller of Mars exploration</a><br>以及视频链接： <a href="https://www.youtube.com/watch?v=TuZoL8VEveQ">Youtobe</a>、<a href="http://www.bilibili.com/video/av7870024/">Bilibili</a></p><p>比赛整体分为三个阶段，第一个阶段是对燃料块（方块）和仪器（圆球）的抓取，至少要抓取一个燃料块，抓取两个会有时间的附加分，这一阶段为手动控制。第二阶段开始为自动控制，要求小车能够对亮起的灯塔进行搜寻并触发相应的开关以关闭灯塔。触碰完四个灯塔后方可进入到下一阶段。第三阶段就是上高台了，小车需要自己调整好角度，成功登上高台，并且把仪器（球）放下。</p><p>整个驭远比赛的赛制则分为初赛、晋级赛和决赛。初赛选取4组队伍直接进入决赛，5-12名则进入晋级赛，并从中再挑选四组。</p><p>我们组在最初确定车身形状时想要让小车能够灵活的转弯，便试用了两轮驱动的圆形底盘。而后，在实际使用中，发现由于电机的不稳定性以及两轮驱动自身的缺陷，车在直线行进时会发生较大漂移。遂采用四轮驱动的方形底盘。</p><p>在团队分工时，由于队伍中有三人都可独立完成任务，直接把项目按照比赛流程划分为三个部分，以时间充裕性直接分配任务。对于重合模块，直接由前一部分提供API，如电机驱动，二三阶段的底盘驱动直接调用一阶段提供的API。</p><p>第1阶段主要问题为，机械臂的安装与控制。我们最初的方案中，机械臂的运动较为复杂，稳定性差。后在调试的过程中，受其他组的启发，将机械由4自由度简化为2自由度，使机械臂的运动更为简单稳定。</p><p>第2阶段中，我们在小车的前后各安装了一个红外复眼，以此实现了在第二场地中的任意位置对开启状态灯塔的定位。以红外复眼为判据，到达合适的位置后，分析红外复眼接受强度的数据，引导小车撞向灯塔。在实际调试过程中，发现踩灯后小车的回位稳定性较差。为解决这一问题，为小车上增加了电子陀螺仪模块，实现了较为准确的姿态控制。但只依靠红外复眼无法找到较为合适的转弯触灯位置，于是又在小车的左右各装了一个红外接收灯（连接到寻迹模块），用于转弯的判定。</p><p>当靠近2区域进出口的灯塔亮起时，小车会因过于靠近进出口而卡住，或回位时无法检测到黑线（黑线长度限制）。便在前后加装灰度传感器，用以避免小车转弯时过于靠近进出口。至此，2阶段完美完成。</p><p>第3阶段相对来说是比较简单的，在使用电子陀螺仪之前，我们在小车的正前方对称安装了3个不同朝向的超声波测距模块，以超声测距为主要依据，最终以非网格路径登上高台。然而，这样做的话，依靠超声测距调整小车时会消耗过多的时间，而且稳定性也欠佳。使用电子陀螺仪后，第3阶段的方案也随之改变。路径由不规则的，变为每次只转90度的网格路径，用陀螺仪来精确控制转角，3个超声测距也精简为1个用于辅助。这样虽然看似路径变长了，基本不需要复杂的调整，更加的稳定简洁。</p><p>比赛过程中也看到了很多新奇的创意，比如直接用空心杯来吸取泡沫，利用胶带直接粘（这个看起来很低端但是确实高效啊！只是物快放置的时候容易GG）等等。同时也见识了一些奇妙的状况，包括灯塔被“巨型”车体怼坏（想想都可怕= =）、成功冲上对方高地之类的。</p><p>嘛，就这么多吧。毕竟还在考期……<br><img src="http://7xread.com1.z0.glb.clouddn.com/82541038-acaf-4056-8257-88e750833b53" alt="Shirobako - 这些你都没掌握吗"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从开始准备学校“驭远杯”比赛，到现在比赛结束，自己和自己的队伍以初赛和决赛都是第一名的成绩成功夺冠，不知不觉已经过去一段时间了。这段时间里，没有和往常一样定期的刷OJ，也少了一定的闲暇时光。基本每天都是在白天上课和写作业，晚上准备比赛这样的节奏中度过。物理实验什么的都停了好
      
    
    </summary>
    
      <category term="Chitchat" scheme="http://yuukidach.github.io/categories/Chitchat/"/>
    
    
      <category term="C" scheme="http://yuukidach.github.io/tags/C/"/>
    
      <category term="STM32" scheme="http://yuukidach.github.io/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu r8168模块编译错误的解决办法</title>
    <link href="http://yuukidach.github.io/2016/10/15/%E5%86%8D%E8%AF%9DUbuntu%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%85%8D%E7%BD%AE/"/>
    <id>http://yuukidach.github.io/2016/10/15/再话Ubuntu以太网配置/</id>
    <published>2016-10-14T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.977Z</updated>
    
    <content type="html"><![CDATA[<p>更新了Ubuntu 16.10之后，发现有线连接模块消失了，于是又和以前一样对r8168进行编译安装。具体的方法请参考我的另一篇文章: <a href="https://yuukidach.github.io/2016/09/10/Ubuntu%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%85%8D%E7%BD%AE/">Ubuntu以太网已断开的解决办法</a></p><p>结果发现在 ‘make clean modules’ 这一步居然出错了。错误信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;home&#x2F;user&#x2F;download&#x2F;r8168-8.042.00&#x2F;src&#x2F;r8168_n.c: In function ‘rtl8168_init_one’:</span><br><span class="line">&#x2F;home&#x2F;user&#x2F;download&#x2F;r8168-8.042.00&#x2F;src&#x2F;r8168_n.c:22799:28: error: ‘struct net_device’ has no member named ‘gso_min_segs’; did you mean ‘gso_max_segs’?</span><br><span class="line">                         dev-&gt;gso_min_segs &#x3D; NIC_MIN_PHYS_BUF_COUNT;</span><br><span class="line">                            ^~</span><br><span class="line">&#x2F;home&#x2F;yuukidach&#x2F;下载&#x2F;r8168-8.042.00&#x2F;src&#x2F;r8168_n.c:22807:28: error: ‘struct net_device’ has no member named ‘gso_min_segs’; did you mean ‘gso_max_segs’?</span><br><span class="line">                         dev-&gt;gso_min_segs &#x3D; NIC_MIN_PHYS_BUF_COUNT;</span><br><span class="line">                            ^~</span><br><span class="line">&#x2F;home&#x2F;user&#x2F;download&#x2F;r8168-8.042.00&#x2F;src&#x2F;r8168_n.c: In function ‘rtl8168_start_xmit’:</span><br><span class="line">&#x2F;home&#x2F;user&#x2F;download&#x2F;r8168-8.042.00&#x2F;src&#x2F;r8168_n.c:24969:12: error: ‘struct net_device’ has no member named ‘trans_start’; did you mean ‘mem_start’?</span><br><span class="line">         dev-&gt;trans_start &#x3D; jiffies;</span><br></pre></td></tr></table></figure></p><p>其实这个错误是因为r8168的版本和Ubuntu版本不配对导致的，只要去官网下载新的r8168的版本就行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更新了Ubuntu 16.10之后，发现有线连接模块消失了，于是又和以前一样对r8168进行编译安装。具体的方法请参考我的另一篇文章: &lt;a href=&quot;https://yuukidach.github.io/2016/09/10/Ubuntu%E4%BB%A5%E5%A4
      
    
    </summary>
    
      <category term="编程学习" scheme="http://yuukidach.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Ubuntu" scheme="http://yuukidach.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yuukidach.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>UVa OJ 1220 - Party at Hali-Bula</title>
    <link href="http://yuukidach.github.io/2016/09/30/OJ/--UVa%20OJ%201220%20-%20Party%20at%20Hali-Bula--/"/>
    <id>http://yuukidach.github.io/2016/09/30/OJ/--UVa OJ 1220 - Party at Hali-Bula--/</id>
    <published>2016-09-29T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><strong>Problem</strong></h1><p>Here is the: <a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3661">problem link</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h1><p>这道题目一开始没有用f[][]来标记是否重复，导致WA了一次，后来就加上去了。另外，在处理人名时，虽然实例输入里，上司和下属名字出现是有先后的，但是提交之后，系统的测试数据貌似不一定是这样，所以要先判断是否出现，没出现就用cnt加1再赋值</p><p>递归的思路还是不难的，选了上司，那么直属员工就不选，用d[][0]表示不选;没选的话就可以选直属员工，也可以不选，分别是d[][1]和d[][0]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G sons[b][i]</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> n, res, yn, d[maxn][<span class="number">2</span>], f[maxn][<span class="number">2</span>];  </span><br><span class="line"><span class="keyword">char</span> c1[maxn], c2[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p;  </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> b,<span class="keyword">int</span> y)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span>&amp; ans = d[b][y];</span><br><span class="line">    <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="keyword">return</span> ans;  </span><br><span class="line">    <span class="keyword">int</span> k = sons[b].size();  </span><br><span class="line">    <span class="keyword">if</span>(!k) &#123;f[b][y] = <span class="number">1</span>; <span class="keyword">return</span> ans = y;&#125;  </span><br><span class="line">    <span class="keyword">int</span> mark = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(y) &#123;   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;  </span><br><span class="line">            ans += dp(G,<span class="number">0</span>);  </span><br><span class="line">            <span class="keyword">if</span>(!f[G][<span class="number">0</span>]) mark = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;  </span><br><span class="line">            <span class="keyword">if</span>(dp(G, <span class="number">0</span>) == dp(G, <span class="number">1</span>)) &#123;mark = <span class="number">0</span>; ans += d[G][<span class="number">0</span>];&#125;  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(d[G][<span class="number">0</span>] &gt; d[G][<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!f[G][<span class="number">0</span>]) mark = <span class="number">0</span>; </span><br><span class="line">                ans += d[G][<span class="number">0</span>]; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!f[G][<span class="number">1</span>]) mark = <span class="number">0</span>; </span><br><span class="line">                ans += d[G][<span class="number">1</span>]; </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    f[b][y] = mark;</span><br><span class="line">    <span class="keyword">return</span> ans += y+<span class="number">1</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot; , &quot;r&quot;, stdin );</span></span><br><span class="line">    <span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;  </span><br><span class="line">        p.clear();  </span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0xff</span>, <span class="keyword">sizeof</span>(d)); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i) sons[i].clear();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c2;  </span><br><span class="line">        p[c2] = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; ++i) &#123;  </span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c1 &gt;&gt; c2;  </span><br><span class="line">            <span class="keyword">if</span>(!p.count(c1)) p[c1] = ++cnt;  </span><br><span class="line">            <span class="keyword">if</span>(!p.count(c2)) p[c2] = ++cnt; </span><br><span class="line">            sons[p[c2]].push_back(p[c1]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(dp(<span class="number">0</span>,<span class="number">0</span>) &gt; dp(<span class="number">0</span>,<span class="number">1</span>)) &#123;res = d[<span class="number">0</span>][<span class="number">0</span>]; yn = f[<span class="number">0</span>][<span class="number">0</span>];&#125;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d[<span class="number">0</span>][<span class="number">0</span>] == d[<span class="number">0</span>][<span class="number">1</span>]) &#123;res = d[<span class="number">0</span>][<span class="number">0</span>]; yn = <span class="number">0</span>;&#125;  </span><br><span class="line">        <span class="keyword">else</span> &#123;res = d[<span class="number">0</span>][<span class="number">1</span>]; yn = f[<span class="number">0</span>][<span class="number">1</span>];&#125;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res;</span><br><span class="line">        <span class="keyword">if</span>(yn) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; Yes\n&quot;</span>;  </span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; No\n&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Here is the: &lt;a href=&quot;https://uva
      
    
    </summary>
    
      <category term="Programming Exercises" scheme="http://yuukidach.github.io/categories/Programming-Exercises/"/>
    
      <category term="UVa OJ" scheme="http://yuukidach.github.io/categories/Programming-Exercises/UVa-OJ/"/>
    
    
      <category term="C++" scheme="http://yuukidach.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://yuukidach.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>UVa OJ 12186 - Another Crisis</title>
    <link href="http://yuukidach.github.io/2016/09/29/OJ/--UVa%20OJ%2012186%20-%20Another%20Crisis--/"/>
    <id>http://yuukidach.github.io/2016/09/29/OJ/--UVa OJ 12186 - Another Crisis--/</id>
    <published>2016-09-28T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><strong>Problem</strong></h1><p>A couple of years ago, a new world wide crisis started, leaving many people with economical problems.  Some workers of a particular company are trying to ask for an increase in their salaries.</p><p>The company has a strict hierarchy, in which each employee has exactly one direct boss, with the exception of the owner of the company that has no boss. Employees that are not bosses of any other employee are called workers. The rest of the employees and the owner are called bosses.  To ask for a salary increase, a worker should file a petition to his direct boss. Of course, each boss is encouraged to try to make their subordinates happy with their current income, making the company’s profit as high as possible. However, when at least T percent of its direct subordinates have filed a petition, that boss will be pressured and have no choice but to file a petition himself to his own direct boss. Each boss files at most 1 petition to his own direct boss, regardless on how many of his subordinates filed him a petition. A boss only accounts his direct subordinates (the ones that filed him a petition and the ones that didn’t) to calculate the pressure percentage.</p><p>Note that a boss can have both workers and bosses as direct subordinates at the same time. Such a boss may receive petitions from both kinds of employees, and each direct subordinate, regardless of its kind, will be accounted as 1 when checking the pressure percentage.</p><p>When a petition file gets all the way up to the owner of the company, all salaries are increased. The workers’ union is desperately trying to make that happen, so they need to convince many workers to file a petition to their direct boss.</p><p>Given the company’s hierarchy and the parameter T, you have to find out the minimum number of workers that have to file a petition in order to make the owner receive a petition.</p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h1><p>There are several test cases. The input for each test case is given in exactly two lines. The first line contains two integers N and T (1 ≤ N ≤ 105 , 1 ≤ T ≤ 100), separated by a single space. N indicates the number of employees of the company (not counting the owner) and T is the parameter described above. Each of the employees is identified by an integer between 1 and N. The owner is identified by the number 0. The second line contains a list of integers separated by single spaces. The integer Bi , at position i on this list (starting from 1), indicates the identification of the direct boss of employee i (0 ≤ Bi ≤ i − 1).</p><p>The last test case is followed by a line containing two zeros separated by a single space.</p><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h1><p>For each test case output a single line containing a single integer with the minimum number of workers that need to file a petition in order to get the owner of the company to receive a petition.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 100</span><br><span class="line">0 0 0</span><br><span class="line">3 50</span><br><span class="line">0 0 0</span><br><span class="line">14 60</span><br><span class="line">0 0 1 1 2 2 2 5 7 5 7 5 7 5 0 0</span><br></pre></td></tr></table></figure><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h1><p>从老板开始，先询问第一层的员工每个人如果要签字，需要各自多少员工签字，然后第二层，第三层……直到最后一层</p><p>接着排序，把需要最少的排前面，相加即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[x].empty()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son;</span><br><span class="line">    <span class="keyword">int</span> len = b[x].size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) son.push_back(dp(b[x][i]));</span><br><span class="line">    sort(son.begin(), son.end());</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, bor = (len*t<span class="number">-1</span>)/<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bor; ++i) ans += son[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot; , &quot;r&quot;, stdin );</span></span><br><span class="line">    <span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            b[tmp].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp(<span class="number">0</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) b[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;A couple of years ago, a new worl
      
    
    </summary>
    
      <category term="Programming Exercises" scheme="http://yuukidach.github.io/categories/Programming-Exercises/"/>
    
      <category term="UVa OJ" scheme="http://yuukidach.github.io/categories/Programming-Exercises/UVa-OJ/"/>
    
    
      <category term="C++" scheme="http://yuukidach.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://yuukidach.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>UVa OJ 1331 - Minimax Triangulation</title>
    <link href="http://yuukidach.github.io/2016/09/29/OJ/--UVa%20OJ%201331%20-%20Minimax%20Triangulation--/"/>
    <id>http://yuukidach.github.io/2016/09/29/OJ/--UVa OJ 1331 - Minimax Triangulation--/</id>
    <published>2016-09-28T16:00:00.000Z</published>
    <updated>2020-11-03T07:58:57.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><strong>Problem</strong></h1><p>Here is the: <a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=4077">problem link</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h1><p>这道题目一开始用递归做，但是时间比较长，于是花了比较长的时间去想应该怎么才能转化成递推</p><p>这道题目用d[i][j]来表示从i点切割到j点中所含的面积最大的三角形中，最小的那个</p><p>这里用了三个循环，第一层是确定分割时跨越的点数，第二层是起点，第三层就是起点和终点中任意取一点分割。同时还要注意分割时会不会有点卡在中间导致实际上不能被分割的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> n, cas;</span><br><span class="line"><span class="keyword">double</span> x[maxn], y[maxn], d[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cntArea</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>((x[b]-x[a])*(y[c]-y[a])-(y[b]-y[a])*(x[c]-x[a]))/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOK</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> s = cntArea(x, y, z);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == x || i == y || i ==z) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">double</span> tmp = cntArea(x,y,i)+cntArea(x,z,i)+cntArea(y,z,i);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(s-tmp) &lt; <span class="number">1e-6</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot; , &quot;r&quot;, stdin );</span></span><br><span class="line">    <span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">    <span class="keyword">while</span>(cas--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = (i+j) % n;</span><br><span class="line">                d[j][a] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = (j+<span class="number">1</span>)%n; k != a; k = (k+<span class="number">1</span>)%n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isOK(j,k,a)) <span class="keyword">continue</span>;</span><br><span class="line">                    d[j][a] = min(d[j][a], max(max(d[j][k],d[k][a]),cntArea(j,k,a)));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == n<span class="number">-1</span>)</span><br><span class="line">                    ans = min(ans, d[j][a]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>.setf(ios::fixed);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Here is the: &lt;a href=&quot;https://uva
      
    
    </summary>
    
      <category term="Programming Exercises" scheme="http://yuukidach.github.io/categories/Programming-Exercises/"/>
    
      <category term="UVa OJ" scheme="http://yuukidach.github.io/categories/Programming-Exercises/UVa-OJ/"/>
    
    
      <category term="C++" scheme="http://yuukidach.github.io/tags/C/"/>
    
      <category term="DP" scheme="http://yuukidach.github.io/tags/DP/"/>
    
  </entry>
  
</feed>
