<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Dash&#39;s Blog</title>
    <link>https://yuukidach.github.io/categories/algorithm/</link>
    <description>Recent content in Algorithm on Dash&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jan 2021 16:08:26 +0800</lastBuildDate><atom:link href="https://yuukidach.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最小生成树算法</title>
      <link>https://yuukidach.github.io/p/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 20 Jan 2021 16:08:26 +0800</pubDate>
      
      <guid>https://yuukidach.github.io/p/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95/</guid>
      <description>Kruskal 算法  新建图$G$，$G$中拥有原图中相同的节点，但没有边 将原图中所有的边按权值从小到大排序 从权值最小的边开始，如果这条边连接的两个节点于图$G$中不在同一个连通分量中，则添加这条边到图$G$中 重复3，直至图$G$中所有的节点都在同一个连通分量中  伪代码：
algorithm Kruskal(G) is F:= ∅ for each v ∈ G.V do MAKE-SET(v) for each (u, v) in G.E ordered by weight(u, v), increasing do if FIND-SET(u) ≠ FIND-SET(v) then F:= F ∪ {(u, v)} UNION(FIND-SET(u), FIND-SET(v)) return F Prim 算法  输入：一个加权连通图，其中顶点集合为$V$，边集合为$V$； 初始化：$V_{new} = {x}$，其中$x$为集合$V$中的任一节点（起始点），$E_{new}={}$ 重复下列操作，直到$V_{new} = V$： a. 在集合$E$中选取权值最小的边$(u, v)$，其中$u$为集合$V_{new}$中的元素，而$v$则是$V$中没有加入$V_{new}$的顶点（如果存在有多条满足前述条件即具有相同权值的边，则可任意选取其中之一）； b. 将$v$加入集合$V_{new}$中，将$(u,v)$加入集合$E_{new}$中； 输出：使用集合$V_{new}$和$E_{new}$来描述所得到的最小生成树。  Leetcode例题：1584. Min Cost to Connect All Points</description>
    </item>
    
    <item>
      <title>Floyd-Warshall 算法</title>
      <link>https://yuukidach.github.io/p/floyd-warshall-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 07 Jan 2021 20:44:45 +0800</pubDate>
      
      <guid>https://yuukidach.github.io/p/floyd-warshall-%E7%AE%97%E6%B3%95/</guid>
      <description>弗洛伊德算法（Floyd-Warshall algorithm) 是解决两点间最短路径的一种算法。时间复杂度$O(N^{3})$，空间复杂度$O(N^{2})$。
其算法原理为动态规划：
设$D_{i,j,k}$为从i到j的只以 (1&amp;hellip;k) 集合中的节点为中间节点的最短路径长
 若最短路径经过k,则$D_{i,j,k}=D_{i,k,k-1}+D_{j,k,k-1}$ 若不经过k,则$D_{i,j,k}=D_{i,j,k-1}$  因而，$D_{i,j,k}=min(D_{i,k,k-1}+D_{j,k,k-1}, D_{i,j,k-1})$
伪代码：
1 let dist be a |V| × |V| array of minimum distances initialized to ∞ (infinity) 2 for each vertex v 3 dist[v][v] ← 0 4 for each edge (u,v) 5 dist[u][v] ← w(u,v) // the weight of the edge (u,v) 6 for k from 1 to |V| 7 for i from 1 to |V| 8 for j from 1 to |V| 9 if dist[i][j] &amp;gt; dist[i][k] + dist[k][j] 10 dist[i][j] ← dist[i][k] + dist[k][j] 11 end if 例题可参照Leecode 399。</description>
    </item>
    
  </channel>
</rss>
